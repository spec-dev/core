#!/bin/bash

# --- Create and deploy K8S tables-api resources --- #

set -e # exit if any child script exits with non-zero status

# ======== PARSE ARGS ======== #

this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
core_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd ../.. && pwd )"
functions_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"
shared_bin_dir="$core_dir/bin"
env="$1"

# ======== VALIDATE ARGS ======== #

$shared_bin_dir/validate_arg "env" "$env" "dev|staging|prod"

# ======== SET KEY VARS ======== #

port=$( $shared_bin_dir/env_reader "$env" "FUNCTIONS_PORT" )
cert_arm=$( $shared_bin_dir/env_reader "$env" "ACM_WILDCARD_CERT_ARM" )

# ======== VALIDATE REQUIRED VARS ======== #

$shared_bin_dir/assert_env "FUNCTIONS_PORT" "$port"
$shared_bin_dir/assert_env "ACM_WILDCARD_CERT_ARM" "$cert_arm"

# ======== GET LATEST IMAGE ======== #

aws_account_id=$( $shared_bin_dir/env_reader "$env" "AWS_ACCOUNT_ID" )
aws_region=$( $shared_bin_dir/env_reader "$env" "AWS_REGION" )  
image_org=$( $shared_bin_dir/env_reader "$env" "DOCKER_IMAGE_ORG" )
image_name=$( $shared_bin_dir/env_reader "$env" "FUNCTIONS_IMAGE_NAME" )
image_repo="$image_org/$image_name"
registry_image="$aws_account_id.dkr.ecr.$aws_region.amazonaws.com/$image_repo"
# image_version=$( $shared_bin_dir/latest_sha )
image_version="979343f"
image="$registry_image:$image_version"

# ======== CREATE & APPLY TEMPLATE ======== #

template_path="$functions_dir/functions.yaml"

# Create the config template.
template=$( cat "$template_path" | \
    sed "s|{{IMAGE}}|$image|g" | \
    sed "s|{{PORT}}|$port|g" | \
    sed "s|{{ACM_WILDCARD_CERT_ARM}}|$cert_arm|g" )

echo "Creating functions resources..."

# Apply the template.
echo "$template" | kubectl apply -f -