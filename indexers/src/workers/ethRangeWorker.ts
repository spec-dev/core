import config from '../config'
import { getIndexer } from '../indexers'
import {
    insertIndexedBlocks,
    setIndexedBlocksToSucceeded,
    logger,
    NewReportedHead,
    IndexedBlockStatus,
    IndexedBlock,
    getBlocksInNumberRange,
    range,
    StringKeyMap,
    EthBlock,
    EthTrace,
    EthContract,
    EthLog,
    EthTransaction,
    fullBlockUpsertConfig,
    fullContractUpsertConfig,
    fullLogUpsertConfig,
    fullTraceUpsertConfig,
    fullTransactionUpsertConfig,
    fullLatestInteractionUpsertConfig,
    SharedTables,
    uniqueByKeys,
    EthLatestInteraction,
    toChunks,
} from '../../../shared'
import { exit } from 'process'
import fs from 'fs'

const latestInteractionsRepo = () => SharedTables.getRepository(EthLatestInteraction)

const numbers = [
    15993648,
    16011276,
    16021058,
    16021059,
    16021060,
    16021061,
    16021062,
    16021063,
    16021064,
    16021065,
    16021066,
    16021067,
    16021068,
    16021069,
    16021070,
    16021071,
    16021072,
    16021073,
    16021074,
    16021075,
    16021076,
    16021077,
    16021078,
    16021079,
    16021080,
    16021081,
    16021082,
    16021083,
    16021084,
    16021085,
    16021086,
    16021087,
    16021088,
    16021089,
    16021090,
    16021091,
    16021092,
    16021093,
    16021094,
    16021095,
    16021096,
    16021097,
    16021098,
    16021099,
    16021100,
    16021101,
    16021102,
    16021103,
    16021104,
    16021105,
    16021106,
    16021107,
    16021108,
    16021109,
    16021110,
    16021111,
    16021112,
    16021113,
    16021114,
    16021115,
    16021116,
    16021117,
    16021118,
    16021119,
    16021120,
    16021121,
    16021122,
    16021123,
    16021124,
    16021125,
    16021126,
    16021127,
    16021128,
    16021129,
    16021130,
    16021131,
    16021132,
    16021133,
    16021134,
    16021135,
    16021136,
    16021137,
    16021138,
    16021139,
    16021140,
    16021141,
    16021142,
    16021143,
    16021144,
    16021145,
    16021146,
    16021147,
    16021148,
    16021149,
    16021150,
    16021151,
    16021152,
    16021153,
    16021154,
    16021155,
    16021156,
    16021157,
    16021158,
    16021159,
    16021160,
    16021161,
    16021162,
    16021163,
    16021164,
    16021165,
    16021166,
    16021167,
    16021168,
    16021169,
    16021170,
    16021171,
    16021172,
    16021173,
    16021174,
    16021175,
    16021176,
    16021177,
    16021178,
    16021179,
    16021180,
    16021181,
    16021182,
    16021183,
    16021184,
    16021185,
    16021186,
    16021187,
    16021188,
    16021189,
    16021190,
    16021191,
    16021192,
    16021193,
    16021194,
    16021195,
    16021196,
    16021197,
    16021198,
    16021199,
    16021200,
    16021201,
    16021202,
    16021203,
    16021204,
    16021205,
    16021206,
    16021207,
    16021208,
    16021209,
    16021210,
    16021211,
    16021212,
    16021213,
    16021214,
    16021215,
    16021216,
    16021217,
    16021218,
    16021219,
    16021220,
    16021221,
    16021222,
    16021223,
    16021224,
    16021225,
    16021226,
    16021227,
    16021228,
    16021229,
    16021230,
    16021231,
    16021232,
    16021233,
    16021234,
    16021235,
    16021236,
    16021237,
    16021238,
    16021239,
    16021240,
    16021241,
    16021242,
    16021243,
    16021244,
    16021245,
    16021246,
    16021247,
    16021248,
    16021249,
    16021250,
    16021251,
    16021252,
    16021253,
    16021254,
    16021255,
    16021256,
    16021257,
    16021258,
    16021259,
    16021260,
    16021261,
    16021262,
    16021263,
    16021264,
    16021265,
    16021266,
    16021267,
    16021268,
    16021269,
    16021270,
    16021271,
    16021272,
    16021273,
    16021274,
    16021275,
    16021276,
    16021277,
    16021278,
    16021279,
    16021280,
    16021281,
    16021282,
    16021283,
    16021284,
    16021285,
    16021286,
    16021287,
    16021288,
    16021289,
    16021290,
    16021291,
    16021292,
    16021293,
    16021294,
    16021295,
    16021296,
    16021297,
    16021298,
    16021299,
    16021300,
    16021301,
    16021302,
    16021303,
    16021304,
    16021305,
    16021306,
    16021307,
    16021308,
    16021309,
    16021310,
    16021311,
    16021312,
    16021313,
    16021314,
    16021315,
    16021316,
    16021317,
    16021318,
    16021319,
    16021320,
    16021321,
    16021322,
    16021323,
    16021324,
    16021325,
    16021326,
    16021327,
    16021328,
    16021329,
    16021330,
    16021331,
    16021332,
    16021333,
    16021334,
    16021335,
    16021336,
    16021337,
    16021338,
    16021339,
    16021340,
    16021341,
    16021342,
    16021343,
    16021344,
    16021345,
    16021346,
    16021347,
    16021348,
    16021349,
    16021350,
    16021351,
    16021352,
    16021353,
    16021354,
    16021355,
    16021356,
    16021357,
    16021358,
    16021359,
    16021360,
    16021361,
    16021362,
    16021363,
    16021364,
    16021365,
    16021366,
    16021367,
    16021368,
    16021369,
    16021370,
    16021371,
    16021372,
    16021373,
    16021374,
    16021375,
    16021376,
    16021377,
    16021378,
    16021379,
    16021380,
    16021381,
    16021382,
    16021383,
    16021384,
    16021385,
    16021386,
    16021387,
    16021388,
    16021389,
    16021390,
    16021391,
    16021392,
    16021393,
    16021394,
    16021395,
    16021396,
    16021397,
    16021398,
    16021399,
    16021400,
    16021401,
    16021402,
    16021403,
    16021404,
    16021405,
    16021406,
    16021407,
    16021408,
    16021409,
    16021410,
    16021411,
    16021412,
    16021413,
    16021414,
    16021415,
    16021416,
    16021417,
    16021418,
    16021419,
    16021420,
    16021421,
    16021422,
    16021423,
    16021424,
    16021425,
    16021426,
    16021427,
    16021428,
    16021429,
    16021430,
    16021431,
    16021432,
    16021433,
    16021434,
    16021435,
    16021436,
    16021437,
    16021438,
    16021439,
    16021440,
    16021441,
    16021442,
    16021443,
    16021444,
    16021445,
    16021446,
    16021447,
    16021448,
    16021449,
    16021450,
    16021451,
    16021452,
    16021453,
    16021454,
    16021455,
    16021456,
    16021457,
    16021458,
    16021459,
    16021460,
    16021461,
    16021462,
    16021463,
    16021464,
    16021465,
    16021466,
    16021467,
    16021468,
    16021469,
    16021470,
    16021471,
    16021472,
    16021473,
    16021474,
    16021475,
    16021476,
    16021477,
    16021478,
    16021479,
    16021480,
    16021481,
    16021482,
    16021483,
    16021484,
    16021485,
    16021486,
    16021487,
    16021488,
    16021489,
    16021490,
    16021491,
    16021492,
    16021493,
    16021494,
    16021495,
    16021496,
    16021497,
    16021498,
    16021499,
    16021500,
    16021501,
    16021502,
    16021503,
    16021504,
    16021505,
    16021506,
    16021507,
    16021508,
    16021509,
    16021510,
    16021511,
    16021512,
    16021513,
    16021514,
    16021515,
    16021516,
    16021517,
    16021518,
    16021519,
    16021520,
    16021521,
    16021522,
    16021523,
    16021524,
    16021525,
    16021526,
    16021527,
    16021528,
    16021529,
    16021530,
    16021531,
    16021532,
    16021533,
    16021534,
    16021535,
    16021536,
    16021537,
    16021538,
    16021539,
    16021540,
    16021541,
    16021542,
    16021543,
    16021544,
    16021545,
    16021546,
    16021547,
    16021548,
    16021549,
    16021550,
    16021551,
    16021552,
    16021553,
    16021554,
    16021555,
    16021556,
    16021557,
    16021558,
    16021559,
    16021560,
    16021561,
    16021562,
    16021563,
    16021564,
    16021565,
    16021566,
    16021567,
    16021568,
    16021569,
    16021570,
    16021571,
    16021572,
    16021573,
    16021574,
    16021575,
    16021576,
    16021577,
    16021578,
    16021579,
    16021580,
    16021581,
    16021582,
    16021583,
    16021584,
    16021585,
    16021586,
    16021587,
    16021588,
    16021589,
    16021590,
    16021591,
    16021592,
    16021593,
    16021594,
    16021595,
    16021596,
    16021597,
    16021598,
    16021599,
    16021600,
    16021601,
    16021602,
    16021603,
    16021604,
    16021605,
    16021606,
    16021607,
    16021608,
    16021609,
    16021610,
    16021611,
    16021612,
    16021613,
    16021614,
    16021615,
    16021616,
    16021617,
    16021618,
    16021619,
    16021620,
    16021621,
    16021622,
    16021623,
    16021624,
    16021625,
    16021626,
    16021627,
    16021628,
    16021629,
    16021630,
    16021631,
    16021632,
    16021633,
    16021634,
    16021635,
    16021636,
    16021637,
    16021638,
    16021639,
    16021640,
    16021641,
    16021642,
    16021643,
    16021644,
    16021645,
    16021646,
    16021647,
    16021648,
    16021649,
    16021650,
    16021651,
    16021652,
    16021653,
    16021654,
    16021655,
    16021656,
    16021657,
    16021658,
    16021659,
    16021660,
    16021661,
    16021662,
    16021663,
    16021664,
    16021665,
    16021666,
    16021667,
    16021668,
    16021669,
    16021670,
    16021671,
    16021672,
    16021673,
    16021674,
    16021675,
    16021676,
    16021677,
    16021678,
    16021679,
    16021680,
    16021681,
    16021682,
    16021683,
    16021684,
    16021685,
    16021686,
    16021687,
    16021688,
    16021689,
    16021690,
    16021691,
    16021692,
    16021693,
    16021694,
    16021695,
    16021696,
    16021697,
    16021698,
    16021699,
    16021700,
    16021701,
    16021702,
    16021703,
    16021704,
    16021705,
    16021706,
    16021707,
    16021708,
    16021709,
    16021710,
    16021711,
    16021712,
    16021713,
    16021714,
    16021715,
    16021716,
    16021717,
    16021718,
    16021719,
    16021720,
    16021721,
    16021722,
    16021723,
    16021724,
    16021725,
    16021726,
    16021727,
    16021728,
    16021729,
    16021730,
    16021731,
    16021732,
    16021733,
    16021734,
    16021735,
    16021736,
    16021737,
    16021738,
    16021739,
    16021740,
    16021741,
    16021742,
    16021743,
    16021744,
    16021745,
    16021746,
    16021747,
    16021748,
    16021749,
    16021750,
    16021751,
    16021752,
    16021753,
    16021754,
    16021755,
    16021756,
    16021757,
    16021758,
    16021759,
    16021760,
    16021761,
    16021762,
    16021763,
    16021764,
    16021765,
    16021766,
    16021767,
    16021768,
    16021769,
    16021770,
    16021771,
    16021772,
    16021773,
    16021774,
    16021775,
    16021776,
    16021777,
    16021778,
    16021779,
    16021780,
    16021781,
    16021782,
    16021783,
    16021784,
    16021785,
    16021786,
    16021787,
    16021788,
    16021789,
    16021790,
    16021791,
    16021792,
    16021793,
    16021794,
    16021795,
    16021796,
    16021797,
    16021798,
    16021799,
    16021800,
    16021801,
    16021802,
    16021803,
    16021804,
    16021805,
    16021806,
    16021807,
    16021808,
    16021809,
    16021810,
    16021811,
    16021812,
    16021813,
    16021814,
    16021815,
    16021816,
    16021817,
    16021818,
    16021819,
    16021820,
    16021821,
    16021822,
    16021823,
    16021824,
    16021825,
    16021826,
    16021827,
    16021828,
    16021829,
    16021830,
    16021831,
    16021832,
    16021833,
    16021834,
    16021835,
    16021836,
    16021837,
    16021838,
    16021839,
    16021840,
    16021841,
    16021842,
    16021843,
    16021844,
    16021845,
    16021846,
    16021847,
    16021848,
    16021849,
    16021850,
    16021851,
    16021852,
    16021853,
    16021854,
    16021855,
    16021856,
    16021857,
    16021858,
    16021859,
    16021860,
    16021861,
    16021862,
    16021863,
    16021864,
    16021865,
    16021866,
    16021867,
    16021868,
    16021869,
    16021870,
    16021871,
    16021872,
    16021873,
    16021874,
    16021875,
    16021876,
    16021877,
    16021878,
    16021879,
    16021880,
    16021881,
    16021882,
    16021883,
    16021884,
    16021885,
    16021886,
    16021887,
    16021888,
    16021889,
    16021890,
    16021891,
    16021892,
    16021893,
    16021894,
    16021895,
    16021896,
    16021897,
    16021898,
    16021899,
    16021900,
    16021901,
    16021902,
    16021903,
    16021904,
    16021905,
    16021906,
    16021907,
    16021908,
    16021909,
    16021910,
    16021911,
    16021912,
    16021913,
    16021914,
    16021915,
    16021916,
    16021917,
    16021918,
    16021919,
    16021920,
    16021921,
    16021922,
    16021923,
    16021924,
    16021925,
    16021926,
    16021927,
    16021928,
    16021929,
    16021930,
    16021931,
    16021932,
    16021933,
    16021934,
    16021935,
    16021936,
    16021937,
    16021938,
    16021939,
    16021940,
    16021941,
    16021942,
    16021943,
    16021944,
    16021945,
    16021946,
    16021947,
    16021948,
    16021949,
    16021950,
    16021951,
    16021952,
    16021953,
    16021954,
    16021955,
    16021956,
    16021957,
    16021958,
    16021959,
    16021960,
    16021961,
    16021962,
    16021963,
    16021964,
    16021965,
    16021966,
    16021967,
    16021968,
    16021969,
    16021970,
    16021971,
    16021972,
    16021973,
    16021974,
    16021975,
    16021976,
    16021977,
    16021978,
    16021979,
    16021980,
    16021981,
    16021982,
    16021983,
    16021984,
    16021985,
    16021986,
    16021987,
    16021988,
    16021989,
    16021990,
    16021991,
    16021992,
    16021993,
    16021994,
    16021995,
    16021996,
    16021997,
    16021998,
    16021999,
    16022000,
    16022001,
    16022002,
    16022003,
    16022004,
    16022005,
    16022006,
    16022007,
    16022008,
    16022009,
    16022010,
    16022011,
    16022012,
    16022013,
    16022014,
    16022015,
    16022016,
    16022017,
    16022018,
    16022019,
    16022020,
    16022021,
    16022022,
    16022023,
    16022024,
    16022025,
    16022026,
    16022027,
    16022028,
    16022029,
    16022030,
    16022031,
    16022032,
    16022033,
    16022034,
    16022035,
    16022036,
    16022037,
    16022038,
    16022039,
    16022040,
    16022041,
    16022042,
    16022043,
    16022044,
    16022045,
    16022046,
    16022047,
    16022048,
    16022049,
    16022050,
    16022051,
    16022052,
    16022053,
    16022054,
    16022055,
    16022056,
    16022057,
    16022058,
    16022059,
    16022060,
    16022061,
    16022062,
    16022063,
    16022064,
    16022065,
    16022066,
    16022067,
    16022068,
    16022069,
    16022070,
    16022071,
    16022072,
    16022073,
    16022074,
    16022075,
    16022076,
    16022077,
    16022078,
    16022079,
    16022080,
    16022081,
    16022082,
    16022083,
    16022084,
    16022085,
    16022086,
    16022087,
    16022088,
    16022089,
    16022090,
    16022091,
    16022092,
    16022093,
    16022094,
    16022095,
    16022096,
    16022097,
    16022098,
    16022099,
    16022100,
    16022101,
    16022102,
    16022103,
    16022104,
    16022105,
    16022106,
    16022107,
    16022108,
    16022109,
    16022110,
    16022111,
    16022112,
    16022113,
    16022114,
    16022115,
    16022116,
    16022117,
    16022118,
    16022119,
    16022120,
    16022121,
    16022122,
    16022123,
    16022124,
    16022125,
    16022126,
    16022127,
    16022128,
    16022129,
    16022130,
    16022131,
    16022132,
    16022133,
    16022134,
    16022135,
    16022136,
    16022137,
    16022138,
    16022139,
    16022140,
    16022141,
    16022142,
    16022143,
    16022144,
    16022145,
    16022146,
    16022147,
    16022148,
    16022149,
    16022150,
    16022151,
    16022152,
    16022153,
    16022154,
    16022155,
    16022156,
    16022157,
    16022158,
    16022159,
    16022160,
    16022161,
    16022162,
    16022163,
    16022164,
    16022165,
    16022166,
    16022167,
    16022168,
    16022169,
    16022170,
    16022171,
    16022172,
    16022173,
    16022174,
    16022175,
    16022176,
    16022177,
    16022178,
    16022179,
    16022180,
    16022181,
    16022182,
    16022183,
    16022184,
    16022185,
    16022186,
    16022187,
    16022188,
    16022189,
    16022190,
    16022191,
    16022192,
    16022193,
    16022194,
    16022195,
    16022196,
    16022197,
    16022198,
    16022199,
    16022200,
    16022201,
    16022202,
    16022203,
    16022204,
    16022205,
    16022206,
    16022207,
    16022208,
    16022209,
    16022210,
    16022211,
    16022212,
    16022213,
    16022214,
    16022215,
    16022216,
    16022217,
    16022218,
    16022219,
    16022220,
    16022221,
    16022222,
    16022223,
    16022224,
    16022225,
    16022226,
    16022227,
    16022228,
    16022229,
    16022230,
    16022231,
    16022232,
    16022233,
    16022234,
    16022235,
    16022236,
    16022237,
    16022238,
    16022239,
    16022240,
    16022241,
    16022242,
    16022243,
    16022244,
    16022245,
    16022246,
    16022247,
    16022248,
    16022249,
    16022250,
    16022251,
    16022252,
    16022253,
    16022254,
    16022255,
    16022256,
    16022257,
    16022258,
    16022259,
    16022260,
    16022261,
    16022262,
    16022263,
    16022264,
    16022265,
    16022266,
    16022267,
    16022268,
    16022269,
    16022270,
    16022271,
    16022272,
    16022273,
    16022274,
    16022275,
    16022276,
    16022277,
    16022278,
    16022279,
    16022280,
    16022281,
    16022282,
    16022283,
    16022284,
    16022285,
    16022286,
    16022287,
    16022288,
    16022289,
    16022290,
    16022291,
    16022292,
    16022293,
    16022294,
    16022295,
    16022296,
    16022297,
    16022298,
    16022299,
    16022300,
    16022301,
    16022302,
    16022303,
    16022304,
    16022305,
    16022306,
    16022307,
    16022308,
    16022309,
    16022310,
    16022311,
    16022312,
    16022313,
    16022314,
    16022315,
    16022316,
    16022317,
    16022318,
    16022319,
    16022320,
    16022321,
    16022322,
    16022323,
    16022324,
    16022325,
    16022326,
    16022327,
    16022328,
    16022329,
    16022330,
    16022331,
    16022332,
    16022333,
    16022334,
    16022335,
    16022336,
    16022337,
    16022338,
    16022339,
    16022340,
    16022341,
    16022342,
    16022343,
    16022344,
    16022345,
    16022346,
    16022347,
    16022348,
    16022349,
    16022350,
    16022351,
    16022352,
    16022353,
    16022354,
    16022355,
    16022356,
    16022357,
    16022358,
    16022359,
    16022360,
    16022361,
    16022362,
    16022363,
    16022364,
    16022365,
    16022366,
    16022367,
    16022368,
    16022369,
    16022370,
    16022371,
    16022372,
    16022373,
    16022374,
    16022375,
    16022376,
    16022377,
    16022378,
    16022379,
    16022380,
    16022381,
    16022382,
    16022383,
    16022384,
    16022385,
    16022386,
    16022387,
    16022388,
    16022389,
    16022390,
    16022391,
    16022392,
    16022393,
    16022394,
    16022395,
    16022396,
    16022397,
    16022398,
    16022399,
    16022400,
    16022401,
    16022402,
    16022403,
    16022404,
    16022405,
    16022406,
    16022407,
    16022408,
    16022409,
    16022410,
    16022411,
    16022412,
    16022413,
    16022414,
    16022415,
    16022416,
    16022417,
    16022418,
    16022419,
    16022420,
    16022421,
    16022422,
    16022423,
    16022424,
    16022425,
    16022426,
    16022427,
    16022428,
    16022429,
    16022430,
    16022431,
    16022432,
    16022433,
    16022434,
    16022435,
    16022436,
    16022437,
    16022438,
    16022439,
    16022440,
    16022441,
    16022442,
    16022443,
    16022444,
    16022445,
    16022446,
    16022447,
    16022448,
    16022449,
    16022450,
    16022451,
    16022452,
    16022453,
    16022454,
    16022455,
    16022456,
    16022457,
    16022458,
    16022459,
    16022460,
    16022461,
    16022462,
    16022463,
    16022464,
    16022465,
    16022466,
    16022467,
    16022468,
    16022469,
    16022470,
    16022471,
    16022472,
    16022473,
    16022474,
    16022475,
    16022476,
    16022477,
    16022478,
    16022479,
    16022480,
    16022481,
    16022482,
    16022483,
    16022484,
    16022485,
    16022486,
    16022487,
    16022488,
    16022489,
    16022490,
    16022491,
    16022492,
    16022493,
    16022494,
    16022495,
    16022496,
    16022497,
    16022498,
    16022499,
    16022500,
    16022501,
    16022502,
    16022503,
    16022504,
    16022505,
    16022506,
    16022507,
    16022508,
    16022509,
    16022510,
    16022511,
    16022512,
    16022513,
    16022514,
    16022515,
    16022516,
    16022517,
    16022518,
    16022519,
    16022520,
    16022521,
    16022522,
    16022523,
    16022524,
    16022525,
    16022526,
    16022527,
    16022528,
    16022529,
    16022530,
    16022531,
    16022532,
    16022533,
    16022534,
    16022535,
    16022536,
    16022537,
    16022538,
    16022539,
    16022540,
    16022541,
    16022542,
    16022543,
    16022544,
    16022545,
    16022546,
    16022547,
    16022548,
    16022549,
    16022550,
    16022551,
    16022552,
    16022553,
    16022554,
    16022555,
    16022556,
    16022557,
    16022558,
    16022559,
    16022560,
    16022561,
    16022562,
    16022563,
    16022564,
    16022565,
    16022566,
    16022567,
    16022568,
    16022569,
    16022570,
    16022571,
    16022572,
    16022573,
    16022574,
    16022575,
    16022576,
    16022577,
    16022578,
    16022579,
    16022580,
    16022581,
    16022582,
    16022583,
    16022584,
    16022585,
    16022586,
    16022587,
    16022588,
    16022589,
    16022590,
    16022591,
    16022592,
    16022593,
    16022594,
    16022595,
    16022596,
    16022597,
    16022598,
    16022599,
    16022600,
    16022601,
    16022602,
    16022603,
    16022604,
    16022605,
    16022606,
    16022607,
    16022608,
    16022609,
    16022610,
    16022611,
    16022612,
    16022613,
    16022614,
    16022615,
    16022616,
    16022617,
    16022618,
    16022619,
    16022620,
    16022621,
    16022622,
    16022623,
    16022624,
    16022625,
    16022626,
    16022627,
    16022628,
    16022629,
    16022630,
    16022631,
    16022632,
    16022633,
    16022634,
    16022635,
    16022636,
    16022637,
    16022638,
    16022639,
    16022640,
    16022641,
    16022642,
    16022643,
    16022644,
    16022645,
    16022646,
    16022647,
    16022648,
    16022649,
    16022650,
    16022651,
    16022652,
    16022653,
    16022654,
    16022655,
    16022656,
    16022657,
    16022658,
    16022659,
    16022660,
    16022661,
    16022662,
    16022663,
    16022664,
    16022665,
    16022666,
    16022667,
    16022668,
    16022669,
    16022670,
    16022671,
    16022672,
    16022673,
    16022674,
    16022675,
    16022676,
    16022677,
    16022678,
    16022679,
    16022680,
    16022681,
    16022682,
    16022683,
    16022684,
    16022685,
    16022686,
    16022687,
    16022688,
    16022689,
    16022690,
    16022691,
    16022692,
    16022693,
    16022694,
    16022695,
    16022696,
    16022697,
    16022698,
    16022699,
    16022700,
    16022701,
    16022702,
    16022703,
    16022704,
    16022705,
    16022706,
    16022707,
    16022708,
    16022709,
    16022710,
    16022711,
    16022712,
    16022713,
    16022714,
    16022715,
    16022716,
    16022717,
    16022718,
    16022719,
    16022720,
    16022721,
    16022722,
    16022723,
    16022724,
    16022725,
    16022726,
    16022727,
    16022728,
    16022729,
    16022730,
    16022731,
    16022732,
    16022733,
    16022734,
    16022735,
    16022736,
    16022737,
    16022738,
    16022739,
    16022740,
    16022741,
    16022742,
    16022743,
    16022744,
    16022745,
    16022746,
    16022747,
    16022748,
    16022749,
    16022750,
    16022751,
    16022752,
    16022753,
    16022754,
    16022755,
    16022756,
    16022757,
    16022758,
    16022759,
    16022760,
    16022761,
    16022762,
    16022763,
    16022764,
    16022765,
    16022766,
    16022767,
    16022768,
    16022769,
    16022770,
    16022771,
    16022772,
    16022773,
    16022774,
    16022775,
    16022776,
    16022777,
    16022778,
    16022779,
    16022780,
    16022781,
    16022782,
    16022783,
    16022784,
    16022785,
    16022786,
    16022787,
    16022788,
    16022789,
    16022790,
    16022791,
    16022792,
    16022793,
    16022794,
    16022795,
    16022796,
    16022797,
    16022798,
    16022799,
    16022800,
    16022801,
    16022802,
    16022803,
    16022804,
    16022805,
    16022806,
    16022807,
    16022808,
    16022809,
    16022810,
    16022811,
    16022812,
    16022813,
    16022814,
    16022815,
    16022816,
    16022817,
    16022818,
    16022819,
    16022820,
    16022821,
    16022822,
    16022823,
    16022824,
    16022825,
    16022826,
    16022827,
    16022828,
    16022829,
    16022830,
    16022831,
    16022832,
    16022833,
    16022834,
    16022835,
    16022836,
    16022837,
    16022838,
    16022839,
    16022840,
    16022841,
    16022842,
    16022843,
    16022844,
    16022845,
    16022846,
    16022847,
    16022848,
    16022849,
    16022850,
    16022851,
    16022852,
    16022853,
    16022854,
    16022855,
    16022856,
    16022857,
    16022858,
    16022859,
    16022860,
    16022861,
    16022862,
    16022863,
    16022864,
    16022865,
    16022866,
    16022867,
    16022868,
    16022869,
    16022870,
    16022871,
    16022872,
    16022873,
    16022874,
    16022875,
    16022876,
    16022877,
    16022878,
    16022879,
    16022880,
    16022881,
    16022882,
    16022883,
    16022884,
    16022885,
    16022886,
    16022887,
    16022888,
    16022889,
    16022890,
    16022891,
    16022892,
    16022893,
    16022894,
    16022895,
    16022896,
    16022897,
    16022898,
    16022899,
    16022900,
    16022901,
    16022902,
    16022903,
    16022904,
    16022905,
    16022906,
    16022907,
    16022908,
    16022909,
    16022910,
    16022911,
    16022912,
    16022913,
    16022914,
    16022915,
    16022916,
    16022917,
    16022918,
    16022919,
    16022920,
    16022921,
    16022922,
    16022923,
    16022924,
    16022925,
    16022926,
    16022927,
    16022928,
    16022929,
    16022930,
    16022931,
    16022932,
    16022933,
    16022934,
    16022935,
    16022936,
    16022937,
    16022938,
    16022939,
    16022940,
    16022941,
    16022942,
    16022943,
    16022944,
    16022945,
    16022946,
    16022947,
    16022948,
    16022949,
    16022950,
    16022951,
    16022952,
    16022953,
    16022954,
    16022955,
    16022956,
    16022957,
    16022958,
    16022959,
    16022960,
    16022961,
    16022962,
    16022963,
    16022964,
    16022965,
    16022966,
    16022967,
    16022968,
    16022969,
    16022970,
    16022971,
    16022972,
    16022973,
    16022974,
    16022975,
    16022976,
    16022977,
    16022978,
    16022979,
    16022980,
    16022981,
    16022982,
    16022983,
    16022984,
    16022985,
    16022986,
    16022987,
    16022988,
    16022989,
    16022990,
    16022991,
    16022992,
    16022993,
    16022994,
    16022995,
    16022996,
    16022997,
    16022998,
    16022999,
    16023000,
    16023001,
    16023002,
    16023003,
    16023004,
    16023005,
    16023006,
    16023007,
    16023008,
    16023009,
    16023010,
    16023011,
    16023012,
    16023013,
    16023014,
    16023015,
    16023016,
    16023017,
    16023018,
    16023019,
    16023020,
    16023021,
    16023022,
    16023023,
    16023024,
    16023025,
    16023026,
    16023027,
    16023028,
    16023029,
    16023030,
    16023031,
    16023032,
    16023033,
    16023034,
    16023035,
    16023036,
    16023037,
    16023038,
    16023039,
    16023040,
    16023041,
    16023042,
    16023043,
    16023044,
    16023045,
    16023046,
    16023047,
    16023048,
    16023049,
    16023050,
    16023051,
    16023052,
    16023053,
    16023054,
    16023055,
    16023056,
    16023057,
    16023058,
    16023059,
    16023060,
    16023061,
    16023062,
    16023063,
    16023064,
    16023065,
    16023066,
    16023067,
    16023068,
    16023069,
    16023070,
    16023071,
    16023072,
    16023073,
    16023074,
    16023075,
    16023076,
    16023077,
    16023078,
    16023079,
    16023080,
    16023081,
    16023082,
    16023083,
    16023084,
    16023085,
    16023086,
    16023087,
    16023088,
    16023089,
    16023090,
    16023091,
    16023092,
    16023093,
    16023094,
    16023095,
    16023096,
    16023097,
    16023098,
    16023099,
    16023100,
    16023101,
    16023102,
    16023103,
    16023104,
    16023105,
    16023106,
    16023107,
    16023108,
    16023109,
    16023110,
    16023111,
    16023112,
    16023113,
    16023114,
    16023115,
    16023116,
    16023117,
    16023118,
    16023119,
    16023120,
    16023121,
    16023122,
    16023123,
    16023124,
    16023125,
    16023126,
    16023127,
    16023128,
    16023129,
    16023130,
    16023131,
    16023132,
    16023133,
    16023134,
    16023135,
    16023136,
    16023137,
    16023138,
    16023139,
    16023140,
    16023141,
    16023142,
    16023143,
    16023144,
    16023145,
    16023146,
    16023147,
    16023148,
    16023149,
    16023150,
    16023151,
    16023152,
    16023153,
    16023154,
    16023155,
    16023156,
    16023157,
    16023158,
    16023159,
    16023160,
    16023161,
    16023162,
    16023163,
    16023164,
    16023165,
    16023166,
    16023167,
    16023168,
    16023169,
    16023170,
    16023171,
    16023172,
    16023173,
    16023174,
    16023175,
    16023176,
    16023177,
    16023178,
    16023179,
    16023180,
    16023181,
    16023182,
    16023183,
    16023184,
    16023185,
    16023186,
    16023187,
    16023188,
    16023189,
    16023190,
    16023191,
    16023192,
    16023193,
    16023194,
    16023195,
    16023196,
    16023197,
    16023198,
    16023199,
    16023200,
    16023201,
    16023202,
    16023203,
    16023204,
    16023205,
    16023206,
    16023207,
    16023208,
    16023209,
    16023210,
    16023211,
    16023212,
    16023213,
    16023214,
    16023215,
    16023216,
    16023217,
    16023218,
    16023219,
    16023220,
    16023221,
    16023222,
    16023223,
    16023224,
    16023225,
    16023226,
    16023227,
    16023228,
    16023229,
    16023230,
    16023231,
    16023232,
    16023233,
    16023234,
    16023235,
    16023236,
    16023237,
    16023238,
    16023239,
    16023240,
    16023241,
    16023242,
    16023243,
    16023244,
    16023245,
    16023246,
    16023247,
    16023248,
    16023249,
    16023250,
    16023251,
    16023252,
    16023253,
    16023254,
    16023255,
    16023256,
    16023257,
    16023258,
    16023259,
    16023260,
    16023261,
    16023262,
    16023263,
    16023264,
    16023265,
    16023266,
    16023267,
    16023268,
    16023269,
    16023270,
    16023271,
    16023272,
    16023273,
    16023274,
    16023275,
    16023276,
    16023277,
    16023278,
    16023279,
    16023280,
    16023281,
    16023282,
    16023283,
    16023284,
    16023285,
    16023286,
    16023287,
    16023288,
    16023289,
    16023290,
    16023291,
    16023292,
    16023293,
    16023294,
    16023295,
    16023296,
    16023297,
    16023298,
    16023299,
    16023300,
    16023301,
    16023302,
    16023303,
    16023304,
    16023305,
    16023306,
    16023307,
    16023308,
    16023309,
    16023310,
    16023311,
    16023312,
    16023313,
    16023314,
    16023315,
    16023316,
    16023317,
    16023318,
    16023319,
    16023320,
    16023321,
    16023322,
    16023323,
    16023324,
    16023325,
    16023326,
    16023327,
    16023328,
    16023329,
    16023330,
    16023331,
    16023332,
    16023333,
    16023334,
    16023335,
    16023336,
    16023337,
    16023338,
    16023339,
    16023340,
    16023341,
    16023342,
    16023343,
    16023344,
    16023345,
    16023346,
    16023347,
    16023348,
    16023349,
    16023350,
    16023351,
    16023352,
    16023353,
    16023354,
    16023355,
    16023356,
    16023357,
    16023358,
    16023359,
    16023360,
    16023361,
    16023362,
    16023363,
    16023364,
    16023365,
    16023366,
    16023367,
    16023368,
    16023369,
    16023370,
    16023371,
    16023372,
    16023373,
    16023374,
    16023375,
    16023376,
    16023377,
    16023378,
    16023379,
    16023380,
    16023381,
    16023382,
    16023383,
    16023384,
    16023385,
    16023386,
    16023387,
    16023388,
    16023389,
    16023390,
    16023391,
    16023392,
    16023393,
    16023394,
    16023395,
    16023396,
    16023397,
    16023398,
    16023399,
    16023400,
    16023401,
    16023402,
    16023403,
    16023404,
    16023405,
    16023406,
    16023407,
    16023408,
    16023409,
    16023410,
    16023411,
    16023412,
    16023413,
    16023414,
    16023415,
    16023416,
    16023417,
    16023418,
    16023419,
    16023420,
    16023421,
    16023422,
    16023423,
    16023424,
    16023425,
    16023426,
    16023427,
    16023428,
    16023429,
    16023430,
    16023431,
    16023432,
    16023433,
    16023434,
    16023435,
    16023436,
    16023437,
    16023438,
    16023439,
    16023440,
    16023441,
    16023442,
    16023443,
    16023444,
    16023445,
    16023446,
    16023447,
    16023448,
    16023449,
    16023450,
    16023451,
    16023452,
    16023453,
    16023454,
    16023455,
    16023456,
    16023457,
    16023458,
    16023459,
    16023460,
    16023461,
    16023462,
    16023463,
    16023464,
    16023465,
    16023466,
    16023467,
    16023468,
    16023469,
    16023470,
    16023471,
    16023472,
    16023473,
    16023474,
    16023475,
    16023476,
    16023477,
    16023478,
    16023479,
    16023480,
    16023481,
    16023482,
    16023483,
    16023484,
    16023485,
    16023486,
    16023487,
    16023488,
    16023489,
    16023490,
    16023491,
    16023492,
    16023493,
    16023494,
    16023495,
    16023496,
    16023497,
    16023498,
    16023499,
    16023500,
    16023501,
    16023502,
    16023503,
    16023504,
    16023505,
    16023506,
    16023507,
    16023508,
    16023509,
    16023510,
    16023511,
    16023512,
    16023513,
    16023514,
    16023515,
    16023516,
    16023517,
    16023518,
    16023519,
    16023520,
    16023521,
    16023522,
    16023523,
    16023524,
    16023525,
    16023526,
    16023527,
    16023528,
    16023529,
    16023530,
    16023531,
    16023532,
    16023533,
    16023534,
    16023535,
    16023536,
    16023537,
    16023538,
    16023539,
    16023540,
    16023541,
    16023542,
    16023543,
    16023544,
    16023545,
    16023546,
    16023547,
    16023548,
    16023549,
    16023550,
    16023551,
    16023552,
    16023553,
    16023554,
    16023555,
    16023556,
    16023557,
    16023558,
    16023559,
    16023560,
    16023561,
    16023562,
    16023563,
    16023564,
    16023565,
    16023566,
    16023567,
    16023568,
    16023569,
    16023570,
    16023571,
    16023572,
    16023573,
    16023574,
    16023575,
    16023576,
    16023577,
    16023578,
    16023579,
    16023580,
    16023581,
    16023582,
    16023583,
    16023584,
    16023585,
    16023586,
    16023587,
    16023588,
    16023589,
    16023590,
    16023591,
    16023592,
    16023593,
    16023594,
    16023595,
    16023596,
    16023597,
    16023598,
    16023599,
    16023600,
    16023601,
    16023602,
    16023603,
    16023604,
    16023605,
    16023606,
    16023607,
    16023608,
    16023609,
    16023610,
    16023611,
    16023612,
    16023613,
    16023614,
    16023615,
    16023616,
    16023617,
    16023618,
    16023619,
    16023620,
    16023621,
    16023622,
    16023623,
    16023624,
    16023625,
    16023626,
    16023627,
    16023628,
    16023629,
    16023630,
    16023631,
    16023632,
    16023633,
    16023634,
    16023635,
    16023636,
    16023637,
    16023638,
    16023639,
    16023640,
    16023641,
    16023642,
    16023643,
    16023644,
    16023645,
    16023646,
    16023647,
    16023648,
    16023649,
    16023650,
    16023651,
    16023652,
    16023653,
    16023654,
    16023655,
    16023656,
    16023657,
    16023658,
    16023659,
    16023660,
    16023661,
    16023662,
    16023663,
    16023664,
    16023665,
    16023666,
    16023667,
    16023668,
    16023669,
    16023670,
    16023671,
    16023672,
    16023673,
    16023674,
    16023675,
    16023676,
    16023677,
    16023678,
    16023679,
    16023680,
    16023681,
    16023682,
    16023683,
    16023684,
    16023685,
    16023686,
    16023687,
    16023688,
    16023689,
    16023690,
    16023691,
    16023692,
    16023693,
    16023694,
    16023695,
    16023696,
    16023697,
    16023698,
    16023699,
    16023700,
    16023701,
    16023702,
    16023703,
    16023704,
    16023705,
    16023706,
    16023707,
    16023708,
    16023709,
    16023710,
    16023711,
    16023712,
    16023713,
    16023714,
    16023715,
    16023716,
    16023717,
    16023718,
    16023719,
    16023720,
    16023721,
    16023722,
    16023723,
    16023724,
    16023725,
    16023726,
    16023727,
    16023728,
    16023729,
    16023730,
    16023731,
    16023732,
    16023733,
    16023734,
    16023735,
    16023736,
    16023737,
    16023738,
    16023739,
    16023740,
    16023741,
    16023742,
    16023743,
    16023744,
    16023745,
    16023746,
    16023747,
    16023748,
    16023749,
    16023750,
    16023751,
    16023752,
    16023753,
    16023754,
    16023755,
    16023756,
    16023757,
    16023758,
    16023759,
    16023760,
    16023761,
    16023762,
    16023763,
    16023764,
    16023765,
    16023766,
    16023767,
    16023768,
    16023769,
    16023770,
    16023771,
    16023772,
    16023773,
    16023774,
    16023775,
    16023776,
    16023777,
    16023778,
    16023779,
    16023780,
    16023781,
    16023782,
    16023783,
    16023784,
    16023785,
    16023786,
    16023787,
    16023788,
    16023789,
    16023790,
    16023791,
    16023792,
    16023793,
    16023794,
    16023795,
    16023796,
    16023797,
    16023798,
    16023799,
    16023800,
    16023801,
    16023802,
    16023803,
    16023804,
    16023805,
    16023806,
    16023807,
    16023808,
    16023809,
    16023810,
    16023811,
    16023812,
    16023813,
    16023814,
    16023815,
    16023816,
    16023817,
    16023818,
    16023819,
    16023820,
    16023821,
    16023822,
    16023823,
    16023824,
    16023825,
    16023826,
    16023827,
    16023828,
    16023829,
    16023830,
    16023831,
    16023832,
    16023833,
    16023834,
    16023835,
    16023836,
    16023837,
    16023838,
    16023839,
    16023840,
    16023841,
    16023842,
    16023843,
    16023844,
    16023845,
    16023846,
    16023847,
    16023848,
    16023849,
    16023850,
    16023851,
    16023852,
    16023853,
    16023854,
    16023855,
    16023856,
    16023857,
    16023858,
    16023859,
    16023860,
    16023861,
    16023862,
    16023863,
    16023864,
    16023865,
    16023866,
    16023867,
    16023868,
    16023869,
    16023870,
    16023871,
    16023872,
    16023873,
    16023874,
    16023875,
    16023876,
    16023877,
    16023878,
    16023879,
    16023880,
    16023881,
    16023882,
    16023883,
    16023884,
    16023885,
    16023886,
    16023887,
    16023888,
    16023889,
    16023890,
    16023891,
    16023892,
    16023893,
    16023894,
    16023895,
    16023896,
    16023897,
    16023898,
    16023899,
    16023900,
    16023901,
    16023902,
    16023903,
    16023904,
    16023905,
    16023906,
    16023907,
    16023908,
    16023909,
    16023910,
    16023911,
    16023912,
    16023913,
    16023914,
    16023915,
    16023916,
    16023917,
    16023918,
    16023919,
    16026005,
    16031395,
    16037005,
    16038006,
    16039006,
    16040005,
    16041005,
    16051126,
    16062853,
    16065005,
    16067759,
    16068006,
    16073005,
    16081992,
    16081993,
    16081994,
    16081995,
    16081996,
    16081997,
    16081998,
    16081999,
    16082000,
    16082001,
    16082002,
    16082003,
    16082004,
    16082005,
    16082006,
    16082007,
    16082008,
    16082009,
    16082010,
    16082011,
    16082012,
    16082013,
    16082014,
    16082015,
    16082016,
    16082017,
    16082018,
    16082019,
    16082020,
    16082021,
    16082022,
    16082023,
    16082024,
    16082025,
    16082026,
    16082027,
    16082028,
    16082029,
    16082030,
    16082031,
    16082032,
    16082033,
    16082034,
    16082035,
    16082036,
    16082037,
    16082038,
    16082039,
    16082040,
    16082041,
    16082042,
    16082043,
    16082044,
    16082045,
    16082046,
    16082047,
    16082048,
    16082049,
    16082050,
    16082051,
    16082052,
    16082053,
    16082054,
    16082055,
    16082056,
    16082057,
    16082058,
    16082059,
    16082060,
    16082061,
    16082062,
    16082063,
    16082064,
    16082065,
    16082066,
    16082067,
    16082068,
    16082069,
    16082070,
    16082071,
    16082072,
    16082073,
    16082074,
    16082075,
    16082076,
    16082077,
    16082078,
    16082079,
    16082080,
    16082081,
    16082082,
    16082083,
    16082084,
    16082085,
    16082086,
    16082087,
    16082088,
    16082089,
    16082090,
    16082091,
    16082092,
    16082093,
    16082094,
    16082095,
    16082096,
    16082097,
    16082098,
    16082099,
    16082100,
    16082101,
    16082102,
    16082103,
    16082104,
    16082105,
    16082106,
    16082107,
    16082108,
    16082109,
    16082110,
    16082111,
    16082112,
    16082113,
    16082114,
    16082115,
    16082116,
    16082117,
    16082118,
    16082119,
    16082120,
    16082121,
    16082122,
    16082123,
    16082124,
    16082125,
    16082126,
    16082127,
    16082128,
    16082129,
    16082130,
    16082131,
    16082132,
    16082133,
    16082134,
    16082135,
    16082136,
    16082137,
    16082138,
    16082139,
    16082140,
    16082141,
    16082142,
    16082143,
    16082144,
    16082145,
    16082146,
    16082147,
    16082148,
    16082149,
    16082150,
    16082151,
    16082152,
    16082153,
    16082154,
    16082155,
    16082156,
    16082157,
    16082158,
    16082159,
    16082160,
    16082161,
    16082162,
    16082163,
    16082164,
    16082165,
    16082166,
    16082167,
    16082168,
    16082169,
    16082170,
    16082171,
    16082172,
    16082173,
    16082174,
    16082175,
    16082176,
    16082177,
    16082178,
    16082179,
    16082180,
    16082181,
    16082182,
    16082183,
    16082184,
    16082185,
    16082186,
    16082187,
    16082188,
    16082189,
    16082190,
    16082191,
    16082192,
    16082193,
    16082194,
    16082195,
    16082196,
    16082197,
    16082198,
    16082199,
    16082200,
    16082201,
    16082202,
    16082203,
    16082204,
    16082205,
    16082206,
    16082207,
    16082208,
    16082209,
    16082210,
    16082211,
    16082212,
    16082213,
    16082214,
    16082215,
    16082216,
    16082217,
    16082218,
    16082219,
    16082220,
    16082221,
    16082222,
    16082223,
    16082224,
    16082225,
    16082226,
    16082227,
    16082228,
    16082229,
    16082230,
    16082231,
    16082232,
    16082233,
    16082234,
    16082235,
    16082236,
    16082237,
    16082238,
    16082239,
    16082240,
    16082241,
    16082242,
    16082243,
    16082244,
    16082245,
    16082246,
    16082247,
    16082248,
    16082249,
    16082250,
    16082251,
    16082252,
    16082253,
    16082254,
    16082255,
    16082256,
    16082257,
    16082258,
    16082259,
    16082260,
    16082261,
    16082262,
    16082263,
    16082264,
    16082265,
    16082266,
    16082267,
    16082268,
    16082269,
    16082270,
    16082271,
    16082272,
    16082273,
    16082274,
    16082275,
    16082276,
    16082277,
    16082278,
    16082279,
    16082280,
    16082281,
    16082282,
    16082283,
    16082284,
    16082285,
    16082286,
    16082287,
    16082288,
    16082289,
    16082290,
    16082291,
    16082292,
    16082293,
    16082294,
    16082295,
    16082296,
    16082297,
    16082298,
    16082299,
    16082300,
    16082301,
    16082302,
    16082303,
    16082304,
    16082305,
    16082306,
    16082307,
    16082308,
    16082309,
    16082310,
    16082311,
    16082312,
    16082313,
    16082314,
    16082315,
    16082316,
    16082317,
    16082318,
    16082319,
    16082320,
    16082321,
    16082322,
    16082323,
    16082324,
    16082325,
    16082326,
    16082327,
    16082328,
    16082329,
    16082330,
    16082331,
    16082332,
    16082333,
    16082334,
    16082335,
    16082336,
    16082337,
    16082338,
    16082339,
    16082340,
    16082341,
    16082342,
    16082343,
    16082344,
    16082345,
    16082346,
    16082347,
    16082348,
    16082349,
    16082350,
    16082351,
    16082352,
    16082353,
    16082354,
    16082355,
    16082356,
    16082357,
    16082358,
    16082359,
    16082360,
    16082361,
    16082362,
    16082363,
    16082364,
    16082365,
    16082366,
    16082367,
    16082368,
    16082369,
    16082370,
    16082371,
    16082372,
    16082373,
    16082374,
    16082375,
    16082376,
    16082377
]

class EthRangeWorker {
    from: number

    to: number | null

    groupSize: number

    saveBatchMultiple: number

    cursor: number

    upsertConstraints: StringKeyMap

    batchResults: any[] = []

    batchBlockNumbersIndexed: number[] = []

    batchExistingBlocksMap: { [key: number]: IndexedBlock } = {}

    chunkSize: number = 2000

    saveBatchIndex: number = 0

    constructor(from: number, to?: number | null, groupSize?: number, saveBatchMultiple?: number) {
        this.from = from
        this.to = to
        this.cursor = from
        this.groupSize = groupSize || 1
        this.saveBatchMultiple = saveBatchMultiple || 1
        this.upsertConstraints = {}
    }

    async run() {
        const chunks = toChunks(numbers, this.groupSize)
        for (const chunk of chunks) {
            await this._indexBlockGroup(chunk)
        }
        // while (this.cursor < this.to) {
        //     const start = this.cursor
        //     const end = Math.min(this.cursor + this.groupSize - 1, this.to)
        //     const groupBlockNumbers = range(start, end)
        //     await this._indexBlockGroup(groupBlockNumbers)
        //     this.cursor = this.cursor + this.groupSize
        // }
        if (this.batchResults.length) {
            await this._saveBatches(
                this.batchBlockNumbersIndexed,
                this.batchResults,
                this.batchExistingBlocksMap
            )
        }
        logger.info('DONE')
        exit()
    }

    async _indexBlockGroup(blockNumbers: number[]) {
        // Get the indexed blocks for these numbers from our registry (Indexer DB).
        // const existingIndexedBlocks = await this._getIndexedBlocksInNumberRange(blockNumbers)
        const existingIndexedBlocks = []
        if (existingIndexedBlocks === null) return // is only null on failure

        // Map existing blocks by number.
        const existingIndexedBlocksMap = {}
        for (const existingIndexedBlock of existingIndexedBlocks) {
            existingIndexedBlocksMap[Number(existingIndexedBlock.number)] = existingIndexedBlock
        }

        // Start indexing this block group.
        const blockNumbersIndexed = []
        const indexResultPromises = []
        for (const blockNumber of blockNumbers) {
            const existingIndexedBlock = existingIndexedBlocksMap[blockNumber]

            // Only index blocks that haven't been indexed before or have previously failed.
            const shouldIndexBlock = !existingIndexedBlock || existingIndexedBlock.failed
            if (!shouldIndexBlock) continue

            blockNumbersIndexed.push(blockNumber)
            indexResultPromises.push(this._indexBlock(blockNumber))
        }

        // Don't do anything if the entire block group has already *successfully* been indexed.
        if (!blockNumbersIndexed.length) return

        logger.info(`Indexing ${blockNumbers[0]} --> ${blockNumbers[blockNumbers.length - 1]}...`)

        // Index block group in parallel.
        const indexResults = await Promise.all(indexResultPromises)

        this.batchBlockNumbersIndexed.push(...blockNumbersIndexed)
        this.batchResults.push(...indexResults)
        this.batchExistingBlocksMap = {
            ...this.batchExistingBlocksMap,
            ...existingIndexedBlocksMap,
        }
        this.saveBatchIndex++

        if (this.saveBatchIndex === this.saveBatchMultiple) {
            this.saveBatchIndex = 0
            const batchBlockNumbersIndexed = [...this.batchBlockNumbersIndexed]
            const batchResults = [...this.batchResults]
            const batchExistingBlocksMap = { ...this.batchExistingBlocksMap }
            await this._saveBatches(batchBlockNumbersIndexed, batchResults, batchExistingBlocksMap)
            this.batchBlockNumbersIndexed = []
            this.batchResults = []
            this.batchExistingBlocksMap = {}
        }
    }

    async _saveBatches(
        batchBlockNumbersIndexed: number[] = [],
        batchResults: any[],
        batchExistingBlocksMap: { [key: number]: IndexedBlock } = {}
    ) {
        const t0 = performance.now()
        try {
            await this._saveBatchResults(batchResults)
        } catch (err) {
            logger.error(`Error saving batch: ${err}`)
            return [null, false]
        }
        const t1 = performance.now()

        // Group index results by block number.
        const retriedBlockNumbersThatSucceeded = []
        const inserts = []
        for (let i = 0; i < batchBlockNumbersIndexed.length; i++) {
            const blockNumber = batchBlockNumbersIndexed[i]
            const result = batchResults[i]
            const succeeded = !!result

            if (!succeeded) {
                logger.error(`Indexing Block Failed: ${blockNumber}`)
            }

            // If the indexed block already existed, but now succeeded, just update the 'failed' status.
            const existingIndexedBlock = batchExistingBlocksMap[blockNumber]
            if (existingIndexedBlock) {
                succeeded && retriedBlockNumbersThatSucceeded.push(existingIndexedBlock.id)
                continue
            }

            // Fresh new indexed block entries.
            inserts.push({
                chainId: config.CHAIN_ID,
                number: blockNumber,
                hash: result?.block?.hash,
                status: IndexedBlockStatus.Complete,
                failed: !succeeded,
            })
        }

        let persistResultPromises = []
        // Persist updates.
        retriedBlockNumbersThatSucceeded.length &&
            persistResultPromises.push(
                setIndexedBlocksToSucceeded(retriedBlockNumbersThatSucceeded)
            )
        // Persist inserts.
        inserts.length && persistResultPromises.push(insertIndexedBlocks(inserts))
        try {
            await Promise.all(persistResultPromises)
        } catch (err) {
            logger.error(
                `Error persisting indexed block results to DB for block range: ${batchBlockNumbersIndexed}`,
                err
            )
        }
    }

    async _indexBlock(blockNumber: number): Promise<StringKeyMap | null> {
        let result
        try {
            result = await getIndexer(this._atNumber(blockNumber)).perform()
        } catch (err) {
            logger.error(`Error indexing block ${blockNumber}:`, err)
            return null
        }
        if (!result) return null

        return result as StringKeyMap
    }

    async _getIndexedBlocksInNumberRange(blockNumbers: number[]): Promise<IndexedBlock[] | null> {
        try {
            return await getBlocksInNumberRange(config.CHAIN_ID, blockNumbers)
        } catch (err) {
            logger.error(
                `Error getting indexed_blocks from DB for block range: ${blockNumbers}`,
                err
            )
            return null
        }
    }

    _atNumber(blockNumber: number): NewReportedHead {
        return {
            id: 0,
            chainId: config.CHAIN_ID,
            blockNumber,
            blockHash: null,
            replace: false,
        }
    }

    async _saveBatchResults(results: any[]) {
        let blocks = []
        let transactions = []
        let logs = []
        let traces = []
        let contracts = []
        let latestInteractions = []

        for (const result of results) {
            if (!result) continue
            blocks.push({ ...result.block, timestamp: () => result.pgBlockTimestamp })
            transactions.push(
                ...result.transactions.map((t) => ({
                    ...t,
                    blockTimestamp: () => result.pgBlockTimestamp,
                }))
            )
            logs.push(
                ...result.logs.map((l) => ({ ...l, blockTimestamp: () => result.pgBlockTimestamp }))
            )
            traces.push(
                ...result.traces.map((t) => ({
                    ...t,
                    blockTimestamp: () => result.pgBlockTimestamp,
                }))
            )
            contracts.push(
                ...result.contracts.map((c) => ({
                    ...c,
                    blockTimestamp: () => result.pgBlockTimestamp,
                }))
            )
            latestInteractions.push(
                ...result.latestInteractions.map((c) => ({
                    ...c,
                    timestamp: () => result.pgBlockTimestamp,
                }))
            )
        }

        if (!this.upsertConstraints.block && blocks.length) {
            this.upsertConstraints.block = fullBlockUpsertConfig(blocks[0])
        }
        if (!this.upsertConstraints.transaction && transactions.length) {
            this.upsertConstraints.transaction = fullTransactionUpsertConfig(transactions[0])
        }
        if (!this.upsertConstraints.log && logs.length) {
            this.upsertConstraints.log = fullLogUpsertConfig(logs[0])
        }
        if (!this.upsertConstraints.trace && traces.length) {
            this.upsertConstraints.trace = fullTraceUpsertConfig(traces[0])
        }
        if (!this.upsertConstraints.contract && contracts.length) {
            this.upsertConstraints.contract = fullContractUpsertConfig(contracts[0])
        }
        if (!this.upsertConstraints.latestInteraction && latestInteractions.length) {
            this.upsertConstraints.latestInteraction = fullLatestInteractionUpsertConfig(
                latestInteractions[0]
            )
        }

        blocks = this.upsertConstraints.block
            ? uniqueByKeys(blocks, this.upsertConstraints.block[1])
            : blocks

        transactions = this.upsertConstraints.transaction
            ? uniqueByKeys(transactions, this.upsertConstraints.transaction[1])
            : transactions

        logs = this.upsertConstraints.log ? uniqueByKeys(logs, ['logIndex', 'transactionHash']) : logs

        traces = this.upsertConstraints.trace
            ? uniqueByKeys(traces, this.upsertConstraints.trace[1])
            : traces

        contracts = this.upsertConstraints.contract
            ? uniqueByKeys(contracts, this.upsertConstraints.contract[1])
            : contracts

        latestInteractions = latestInteractions.sort((a, b) => b.blockNumber - a.blockNumber)
        latestInteractions = this.upsertConstraints.latestInteraction
            ? uniqueByKeys(latestInteractions, this.upsertConstraints.latestInteraction[1])
            : latestInteractions

        await SharedTables.manager.transaction(async (tx) => {
            await Promise.all([
                this._upsertBlocks(blocks, tx),
                this._upsertTransactions(transactions, tx),
                this._upsertLogs(logs, tx),
                this._upsertTraces(traces, tx),
                this._upsertContracts(contracts, tx),
                this._upsertLatestInteractions(latestInteractions, tx),
            ])
        })
    }

    async _upsertBlocks(blocks: StringKeyMap[], tx: any) {
        if (!blocks.length) return
        const [updateBlockCols, conflictBlockCols] = this.upsertConstraints.block
        await tx
            .createQueryBuilder()
            .insert()
            .into(EthBlock)
            .values(blocks)
            .orUpdate(updateBlockCols, conflictBlockCols)
            .execute()
    }

    async _upsertTransactions(transactions: StringKeyMap[], tx: any) {
        if (!transactions.length) return
        logger.info(`Saving ${transactions.length} transactions...`)
        const [updateTransactionCols, conflictTransactionCols] = this.upsertConstraints.transaction
        await Promise.all(
            toChunks(transactions, this.chunkSize).map((chunk) => {
                return tx
                    .createQueryBuilder()
                    .insert()
                    .into(EthTransaction)
                    .values(chunk)
                    .orUpdate(updateTransactionCols, conflictTransactionCols)
                    .execute()
            })
        )
    }

    async _upsertLogs(logs: StringKeyMap[], tx: any) {
        if (!logs.length) return
        logger.info(`Saving ${logs.length} logs...`)
        const [updateLogCols, conflictLogCols] = this.upsertConstraints.log
        await Promise.all(
            toChunks(logs, this.chunkSize).map((chunk) => {
                return tx
                    .createQueryBuilder()
                    .insert()
                    .into(EthLog)
                    .values(chunk)
                    .orUpdate(updateLogCols, conflictLogCols)
                    .execute()
            })
        )
    }

    async _upsertTraces(traces: StringKeyMap[], tx: any) {
        if (!traces.length) return
        logger.info(`Saving ${traces.length} traces...`)
        const [updateTraceCols, conflictTraceCols] = this.upsertConstraints.trace
        await Promise.all(
            toChunks(traces, this.chunkSize).map((chunk) => {
                return tx
                    .createQueryBuilder()
                    .insert()
                    .into(EthTrace)
                    .values(chunk)
                    .orUpdate(updateTraceCols, conflictTraceCols)
                    .execute()
            })
        )
    }

    async _upsertContracts(contracts: StringKeyMap[], tx: any) {
        if (!contracts.length) return
        logger.info(`Saving ${contracts.length} contracts...`)
        const [updateContractCols, conflictContractCols] = this.upsertConstraints.contract
        await Promise.all(
            toChunks(contracts, this.chunkSize).map((chunk) => {
                return tx
                    .createQueryBuilder()
                    .insert()
                    .into(EthContract)
                    .values(chunk)
                    .orUpdate(updateContractCols, conflictContractCols)
                    .execute()
            })
        )
    }

    async _upsertLatestInteractions(latestInteractions: StringKeyMap[], tx: any) {
        if (!latestInteractions.length) return
        const chunks = toChunks(latestInteractions, this.chunkSize)
        const [updateCols, conflictCols] = this.upsertConstraints.latestInteraction

        for (const chunk of chunks) {
            const existingLatestInteractions = (await latestInteractionsRepo().find({
                select: { from: true, to: true, blockNumber: true },
                where: chunk.map(li => ({ from: li.from, to: li.to }))
            })) || []
            const latestBlockNumberForGroup = {}
            for (const li of existingLatestInteractions) {
                latestBlockNumberForGroup[[li.from, li.to].join(':')] = li.blockNumber
            }
            const latestInteractionsToUpsert = []
            for (const li of chunk) {
                const lastBlockNumber = existingLatestInteractions[[li.from, li.to].join(':')]
                if (!lastBlockNumber || Number(li.blockNumber) > Number(lastBlockNumber)) {
                    latestInteractionsToUpsert.push(li)
                }
            }
            if (!latestInteractionsToUpsert.length) continue
            logger.info(`Saving ${latestInteractionsToUpsert.length} latest interactions...`)
            await tx
                .createQueryBuilder()
                .insert()
                .into(EthLatestInteraction)
                .values(latestInteractionsToUpsert)
                .orUpdate(updateCols, conflictCols)
                .execute()
        }
        // const [updateCols, conflictCols] = this.upsertConstraints.latestInteraction
        // await Promise.all(
                // return tx
                //     .createQueryBuilder()
                //     .insert()
                //     .into(EthLatestInteraction)
                //     .values(chunk)
                //     .orUpdate(updateCols, conflictCols)
                //     .execute()
            // })
        // )
    }
}

export function getEthRangeWorker(): EthRangeWorker {
    return new EthRangeWorker(
        config.FROM,
        config.TO,
        config.RANGE_GROUP_SIZE,
        config.SAVE_BATCH_MULTIPLE
    )
}
