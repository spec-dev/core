import config from '../config'
import { getIndexer } from '../indexers'
import {
    insertIndexedBlocks,
    setIndexedBlocksToSucceeded,
    logger,
    NewReportedHead,
    IndexedBlockStatus,
    IndexedBlock,
    getBlocksInNumberRange,
    range,
    StringKeyMap,
    EthBlock,
    EthTrace,
    EthContract,
    EthLog,
    EthTransaction,
    fullBlockUpsertConfig,
    fullContractUpsertConfig,
    fullLogUpsertConfig,
    fullTraceUpsertConfig,
    fullTransactionUpsertConfig,
    fullLatestInteractionUpsertConfig,
    SharedTables,
    uniqueByKeys,
    EthLatestInteraction,
    toChunks,
} from '../../../shared'
import fs from 'fs'

const missingBlockNumbers = [
    15527202,
    15527633,
    15534207,
    15534996,
    15539509,
    15574339,
    15619985,
    15619986,
    15619987,
    15619988,
    15619989,
    15619990,
    15639956,
    15639957,
    15639958,
    15639959,
    15639960,
    15639961,
    15639962,
    15639963,
    15639964,
    15639965,
    15639966,
    15639967,
    15639968,
    15639969,
    15639970,
    15639971,
    15639972,
    15639973,
    15639974,
    15639975,
    15639976,
    15639977,
    15639978,
    15639979,
    15639980,
    15639981,
    15639982,
    15639983,
    15639984,
    15639985,
    15639986,
    15639987,
    15639988,
    15665975,
    15665976,
    15665977,
    15665978,
    15665979,
    15665980,
    15666021,
    15666022,
    15666023,
    15668545,
    15668602,
    15668603,
    15668604,
    15668605,
    15668606,
    15668607,
    15668608,
    15668609,
    15668610,
    15668611,
    15668612,
    15668613,
    15668614,
    15668615,
    15668616,
    15668617,
    15668618,
    15668619,
    15668620,
    15668621,
    15668622,
    15668623,
    15668624,
    15668625,
    15668626,
    15668627,
    15668628,
    15668629,
    15668630,
    15668631,
    15668632,
    15668633,
    15668634,
    15668635,
    15668636,
    15668637,
    15668638,
    15668639,
    15668640,
    15668641,
    15668642,
    15668643,
    15668644,
    15668645,
    15668646,
    15668647,
    15668648,
    15668649,
    15668650,
    15668651,
    15668652,
    15668672,
    15668675,
    15668676,
    15668677,
    15668678,
    15668679,
    15668680,
    15668681,
    15668689,
    15668690,
    15668691,
    15668692,
    15668693,
    15668694,
    15668695,
    15668696,
    15668697,
    15668698,
    15668699,
    15668700,
    15668928,
    15668929,
    15668930,
    15668931,
    15668932,
    15668933,
    15668934,
    15668935,
    15668936,
    15668937,
    15668938,
    15668939,
    15668940,
    15668941,
    15668942,
    15668943,
    15668944,
    15668945,
    15668946,
    15668947,
    15762597,
    15796560,
    15796561,
    15892665,
    15900095,
    15900096,
    15900097,
    15900098,
    15900099,
    15900100,
    15900101,
    15900102,
    15900125,
    15900126,
    15900127,
    15900128,
    15900129,
    15900130,
    15900131,
    15900132,
    15900133,
    15900134,
    15900358,
    15900359,
    15900360,
    15900361,
    15900362,
    15900363,
    15900364,
    15900494,
    15900501,
    15900502,
    15900503,
    15900504,
    15900505,
    15900506,
    15900507,
    15900508,
    15900509,
    15900510,
    15900511,
    15900512,
    15900513,
    15900514,
    15900515,
    15900516,
    15900517,
    15900518,
    15900519,
    15900520,
    15900521,
    15900522,
    15900523,
    15900524,
    15900525,
    15900526,
    15900527,
    15900528,
    15900529,
    15900530,
    15900531,
    15900532,
    15900533,
    15900534,
    15900535,
    15900536,
    15900537,
    15900538,
    15900539,
    15900540,
    15900541,
    15900542,
    15900543,
    15900544,
    15900545,
    15900546,
    15900547,
    15900548,
    15900549,
    15900550,
    15900551,
    15900552,
    15900553,
    15900554,
    15900555,
    15900556,
    15900557,
    15900558,
    15900559,
    15900560,
    15900561,
    15900562,
    15900563,
    15900564,
    15900565,
    15900566,
    15900567,
    15900568,
    15900569,
    15900570,
    15900571,
    15900572,
    15900573,
    15900574,
    15900575,
    15900576,
    15900577,
    15900578,
    15900579,
    15900580,
    15900581,
    15900582,
    15900583,
    15900584,
    15900585,
    15900586,
    15900587,
    15900588,
    15900589,
    15900590,
    15900591,
    15900592,
    15900593,
    15900594,
    15900595,
    15900596,
    15900597,
    15900598,
    15900599,
    15900600,
    15900601,
    15900602,
    15900603,
    15900604,
    15900605,
    15900606,
    15900607,
    15900608,
    15900609,
    15900610,
    15900611,
    15900612,
    15900613,
    15900614,
    15900615,
    15900616,
    15900617,
    15900618,
    15900619,
    15900700,
    15900701,
    15900708,
    15900709,
    15900710,
    15900711,
    15900712,
    15900724,
    15900725,
    15900726,
    15900727,
    15900728,
    15900729,
    15900730,
    15900731,
    15900733,
    15900734,
    15900735,
    15900736,
    15900737,
    15900738,
    15900739,
    15900740,
    15900741,
    15900749,
    15900750,
    15900751,
    15900756,
    15900757,
    15900758,
    15900759,
    15900760,
    15900764,
    15900765,
    15900766,
    15900767,
    15901357,
    15901358,
    15901359,
    15901360,
    15901361,
    15901362,
    15902092,
    15902093,
    15902094,
    15902095,
    15902096,
    15902097,
    15902098,
    15902224,
    15902231,
    15902232,
    15902233,
    15902234,
    15902240,
    15902241,
    15902242,
    15902243,
    15902244,
    15902251,
    15902252,
    15902253,
    15902256,
    15902257,
    15902258,
    15902259,
    15902260,
    15902261,
    15902262,
    15902263,
    15902267,
    15902268,
    15902269,
    15902270,
    15902271,
    15902272,
    15902273,
    15902274,
    15902275,
    15902276,
    15902277,
    15902278,
    15902279,
    15902280,
    15902281,
    15902282,
    15902283,
    15902284,
    15902285,
    15902286,
    15902287,
    15902288,
    15902289,
    15902290,
    15902291,
    15902292,
    15902293,
    15902294,
    15902295,
    15902296,
    15902297,
    15902298,
    15902299,
    15902300,
    15902301,
    15902302,
    15902303,
    15902304,
    15902305,
    15902306,
    15902307,
    15902308,
    15902309,
    15902310,
    15902311,
    15902312,
    15902313,
    15902314,
    15902315,
    15902316,
    15902317,
    15902318,
    15902319,
    15902320,
    15902321,
    15902322,
    15902323,
    15902324,
    15902325,
    15902326,
    15902327,
    15902328,
    15902329,
    15902330,
    15902331,
    15902332,
    15902333,
    15902334,
    15902335,
    15902336,
    15902337,
    15902338,
    15902339,
    15902340,
    15902341,
    15902342,
    15902343,
    15902344,
    15902345,
    15902346,
    15902347,
    15902348,
    15902349,
    15902350,
    15902351,
    15902352,
    15902353,
    15902354,
    15902355,
    15902356,
    15902357,
    15902358,
    15902359,
    15902360,
    15902361,
    15902362,
    15902363,
    15902364,
    15902365,
    15902366,
    15902367,
    15902368,
    15902369,
    15902370,
    15902371,
    15902372,
    15902373,
    15902374,
    15902375,
    15902376,
    15902377,
    15902378,
    15902379,
    15902380,
    15902381,
    15902382,
    15902752,
    15902753,
    15902754,
    15902755,
    15902756,
    15902769,
    15902770,
    15902771,
    15902856,
    15902857,
    15902858,
    15902859,
    15902860,
    15902861,
    15902862,
    15902863,
    15902864,
    15902865,
    15902866,
    15902867,
    15902868,
    15902869,
    15902870,
    15902871,
    15902872,
    15902873,
    15902874,
    15902875,
    15902876,
    15902877,
    15902878,
    15902879,
    15902880,
    15902881,
    15902882,
    15902883,
    15902884,
    15902885,
    15902886,
    15902887,
    15902888,
    15902889,
    15902890,
    15902891,
    15902892,
    15902893,
    15902894,
    15902895,
    15902896,
    15902897,
    15902898,
    15902899,
    15902900,
    15902901,
    15902902,
    15902903,
    15902904,
    15902905,
    15902906,
    15902907,
    15902908,
    15902909,
    15902910,
    15902911,
    15902912,
    15902913,
    15902914,
    15902915,
    15902916,
    15902917,
    15902918,
    15902919,
    15902920,
    15902921,
    15902922,
    15902923,
    15902924,
    15902925,
    15902926,
    15902927,
    15902928,
    15902929,
    15902930,
    15902931,
    15902932,
    15902933,
    15902934,
    15902935,
    15902936,
    15902937,
    15902938,
    15902939,
    15902940,
    15902941,
    15902942,
    15902943,
    15902944,
    15902945,
    15902946,
    15902947,
    15902948,
    15902949,
    15902950,
    15902951,
    15902952,
    15902953,
    15902954,
    15902955,
    15902956,
    15902957,
    15902958,
    15902959,
    15902960,
    15902961,
    15902962,
    15902963,
    15902964,
    15902965,
    15902966,
    15902967,
    15902968,
    15902969,
    15902970,
    15902971,
    15902972,
    15902973,
    15902974,
    15902975,
    15902976,
    15902977,
    15902978,
    15902979,
    15902980,
    15902981,
    15902982,
    15902983,
    15902984,
    15902985,
    15902986,
    15902987,
    15902988,
    15902989,
    15902990,
    15902991,
    15902992,
    15902993,
    15902994,
    15902995,
    15902996,
    15902997,
    15902998,
    15902999,
    15903000,
    15903001,
    15903002,
    15903003,
    15903004,
    15903005,
    15903006,
    15903007,
    15903008,
    15903009,
    15903010,
    15903011,
    15903012,
    15903013,
    15903014,
    15903015,
    15903016,
    15903017,
    15903018,
    15903019,
    15903020,
    15903021,
    15903022,
    15903023,
    15903024,
    15903025,
    15903026,
    15903027,
    15903028,
    15903029,
    15903030,
    15903031,
    15903032,
    15903033,
    15903034,
    15903035,
    15903036,
    15903037,
    15903038,
    15903039,
    15903040,
    15903041,
    15903042,
    15903043,
    15903044,
    15903045,
    15903046,
    15903047,
    15903048,
    15903049,
    15903050,
    15903051,
    15903052,
    15903053,
    15903054,
    15903055,
    15903056,
    15903057,
    15903058,
    15903059,
    15903060,
    15903061,
    15903062,
    15903063,
    15903064,
    15903065,
    15903066,
    15903067,
    15903068,
    15903069,
    15903070,
    15903071,
    15903072,
    15903073,
    15903074,
    15903075,
    15903076,
    15903077,
    15903078,
    15903079,
    15903080,
    15903081,
    15903082,
    15903083,
    15903084,
    15903085,
    15903086,
    15903087,
    15903088,
    15903089,
    15903090,
    15903091,
    15903092,
    15903093,
    15903094,
    15903095,
    15903096,
    15903097,
    15903098,
    15903099,
    15903100,
    15903101,
    15903102,
    15903103,
    15903104,
    15903105,
    15903106,
    15903107,
    15903108,
    15903109,
    15903110,
    15903111,
    15903112,
    15903113,
    15903114,
    15903115,
    15903116,
    15903117,
    15903118,
    15903119,
    15903120,
    15903121,
    15903122,
    15903123,
    15903124,
    15903125,
    15903126,
    15903127,
    15903128,
    15903129,
    15903130,
    15903131,
    15903132,
    15903133,
    15903134,
    15903135,
    15903136,
    15903137,
    15903138,
    15903139,
    15903140,
    15903141,
    15903142,
    15903143,
    15903144,
    15903145,
    15903146,
    15903147,
    15903148,
    15903149,
    15903150,
    15903151,
    15903152,
    15903153,
    15903154,
    15903155,
    15903156,
    15903157,
    15903158,
    15903159,
    15903160,
    15903161,
    15903162,
    15903163,
    15903164,
    15903165,
    15903166,
    15903167,
    15903168,
    15903169,
    15903170,
    15903171,
    15903172,
    15903173,
    15903174,
    15903175,
    15903176,
    15903177,
    15903178,
    15903179,
    15903180,
    15903181,
    15903182,
    15903183,
    15903184,
    15903185,
    15903186,
    15903187,
    15903188,
    15903189,
    15903190,
    15903191,
    15903192,
    15903193,
    15903194,
    15903195,
    15903196,
    15903197,
    15903198,
    15903199,
    15903200,
    15903201,
    15903202,
    15903203,
    15903204,
    15903205,
    15903206,
    15903207,
    15903208,
    15903209,
    15903210,
    15903211,
    15903212,
    15903213,
    15903214,
    15903215,
    15903216,
    15903217,
    15903218,
    15903219,
    15903220,
    15903221,
    15903222,
    15903223,
    15903224,
    15903225,
    15903226,
    15903227,
    15903228,
    15903229,
    15903230,
    15903231,
    15903232,
    15903233,
    15903234,
    15903235,
    15903236,
    15903237,
    15903238,
    15903239,
    15903240,
    15903241,
    15903242,
    15903243,
    15903244,
    15903245,
    15903246,
    15903247,
    15903248,
    15903249,
    15903250,
    15903251,
    15903252,
    15903253,
    15903254,
    15903255,
    15903256,
    15903257,
    15903258,
    15903259,
    15903260,
    15903261,
    15903262,
    15903263,
    15903264,
    15903265,
    15903266,
    15903267,
    15903268,
    15903269,
    15903270,
    15903271,
    15903272,
    15903273,
    15903274,
    15903275,
    15903276,
    15903277,
    15903278,
    15903279,
    15903280,
    15903281,
    15903282,
    15903283,
    15903284,
    15903285,
    15903286,
    15903287,
    15903288,
    15903289,
    15903290,
    15903291,
    15903292,
    15903293,
    15903294,
    15903295,
    15903296,
    15903297,
    15903298,
    15903299,
    15903300,
    15903301,
    15903302,
    15903303,
    15903304,
    15903305,
    15903306,
    15903307,
    15903308,
    15903309,
    15903310,
    15903311,
    15903312,
    15903313,
    15903314,
    15903315,
    15903316,
    15903317,
    15903318,
    15903319,
    15903320,
    15903321,
    15903322,
    15903323,
    15903324,
    15903325,
    15903326,
    15903327,
    15903328,
    15903329,
    15903330,
    15903331,
    15903332,
    15903333,
    15903334,
    15903335,
    15903336,
    15903337,
    15903338,
    15903339,
    15903340,
    15903341,
    15903342,
    15903343,
    15903344,
    15903345,
    15903346,
    15903347,
    15903348,
    15903349,
    15903350,
    15903351,
    15903352,
    15903353,
    15903354,
    15903355,
    15903356,
    15903357,
    15903358,
    15903359,
    15903360,
    15903361,
    15903362,
    15903363,
    15903364,
    15903365,
    15903366,
    15903367,
    15903368,
    15903369,
    15903370,
    15903371,
    15903372,
    15903373,
    15903374,
    15903375,
    15903376,
    15903377,
    15903378,
    15903379,
    15903380,
    15903381,
    15903382,
    15903383,
    15903384,
    15903385,
    15903386,
    15903387,
    15903388,
    15903389,
    15903390,
    15903391,
    15903392,
    15903393,
    15903394,
    15903395,
    15903396,
    15903397,
    15903398,
    15903399,
    15903400,
    15903401,
    15903402,
    15903403,
    15903404,
    15903405,
    15903406,
    15903407,
    15903408,
    15903409,
    15903410,
    15903411,
    15903412,
    15903413,
    15903414,
    15903415,
    15903416,
    15903417,
    15903418,
    15903419,
    15903420,
    15903421,
    15903422,
    15903423,
    15903424,
    15903425,
    15903426,
    15903427,
    15903428,
    15903429,
    15903430,
    15903431,
    15903432,
    15903433,
    15903434,
    15903435,
    15903436,
    15903437,
    15903438,
    15903439,
    15903440,
    15903441,
    15903442,
    15903443,
    15903444,
    15903445,
    15903446,
    15903447,
    15903448,
    15903449,
    15903450,
    15903451,
    15903452,
    15903453,
    15903454,
    15903455,
    15903456,
    15903457,
    15903458,
    15903459,
    15903460,
    15903461,
    15903462,
    15903463,
    15903464,
    15903465,
    15903466,
    15903467,
    15903468,
    15903469,
    15903470,
    15903471,
    15903472,
    15903473,
    15903474,
    15903475,
    15903476,
    15903477,
    15903478,
    15903479,
    15903480,
    15903481,
    15903482,
    15903483,
    15903484,
    15903485,
    15903486,
    15903487,
    15903488,
    15903489,
    15903490,
    15903491,
    15903492,
    15903493,
    15903494,
    15903495,
    15903496,
    15903497,
    15903498,
    15903499,
    15903500,
    15903501,
    15903502,
    15903503,
    15903504,
    15903505,
    15903506,
    15903507,
    15903508,
    15903509,
    15903510,
    15903511,
    15903512,
    15903513,
    15903514,
    15903515,
    15903516,
    15903517,
    15903518,
    15903519,
    15903520,
    15903521,
    15903522,
    15903523,
    15903524,
    15903525,
    15903526,
    15903527,
    15903528,
    15903529,
    15903530,
    15903531,
    15903532,
    15903533,
    15903534,
    15903535,
    15903536,
    15903537,
    15903538,
    15903539,
    15903540,
    15903541,
    15903542,
    15903543,
    15903544,
    15903545,
    15903546,
    15903547,
    15903548,
    15903549,
    15903550,
    15903551,
    15903552,
    15903553,
    15903554,
    15903555,
    15903556,
    15903557,
    15903558,
    15903559,
    15903560,
    15903561,
    15903562,
    15903563,
    15903564,
    15903565,
    15903566,
    15903567,
    15903568,
    15903569,
    15903570,
    15903571,
    15903572,
    15903573,
    15903574,
    15903575,
    15903576,
    15903577,
    15903578,
    15903579,
    15903580,
    15903581,
    15903582,
    15903583,
    15903584,
    15903585,
    15903586,
    15903587,
    15903588,
    15903589,
    15903590,
    15903591,
    15903592,
    15903593,
    15903594,
    15903595,
    15903596,
    15903597,
    15903598,
    15903599,
    15903600,
    15903601,
    15903602,
    15903603,
    15903604,
    15903605,
    15903606,
    15903607,
    15903608,
    15903609,
    15903610,
    15903611,
    15903612,
    15903613,
    15903614,
    15903615,
    15903616,
    15903617,
    15903618,
    15903619,
    15903620,
    15903621,
    15903622,
    15903623,
    15903624,
    15903625,
    15903626,
    15903627,
    15903628,
    15903629,
    15903630,
    15903631,
    15903632,
    15903633,
    15903634,
    15903635,
    15903636,
    15903637,
    15903638,
    15903639,
    15903640,
    15903641,
    15903642,
    15903643,
    15903644,
    15903645,
    15903646,
    15903647,
    15903648,
    15903649,
    15903650,
    15903651,
    15903652,
    15903653,
    15903654,
    15903655,
    15903656,
    15903657,
    15903658,
    15903659,
    15903660,
    15903661,
    15903662,
    15903663,
    15903664,
    15903665,
    15903666,
    15903667,
    15903668,
    15903669,
    15903670,
    15903671,
    15903672,
    15903673,
    15903674,
    15903675,
    15903676,
    15903677,
    15903678,
    15903679,
    15903680,
    15903681,
    15903682,
    15903683,
    15903684,
    15903685,
    15903686,
    15903687,
    15903688,
    15903689,
    15903690,
    15903691,
    15903692,
    15903693,
    15903694,
    15903695,
    15903696,
    15903697,
    15903698,
    15903699,
    15903700,
    15903701,
    15903702,
    15903703,
    15903704,
    15903705,
    15903706,
    15903707,
    15903708,
    15903709,
    15903710,
    15903711,
    15903712,
    15903713,
    15903714,
    15903715,
    15903716,
    15903717,
    15903718,
    15903719,
    15903720,
    15903721,
    15903722,
    15903723,
    15903724,
    15903725,
    15903726,
    15903727,
    15903728,
    15903729,
    15903730,
    15903731,
    15903732,
    15903733,
    15903734,
    15903735,
    15903736,
    15903737,
    15903738,
    15903739,
    15903740,
    15903741,
    15903742,
    15903743,
    15903744,
    15903745,
    15903746,
    15903747,
    15903748,
    15903749,
    15903750,
    15903751,
    15903752,
    15903753,
    15903754,
    15903755,
    15903756,
    15903757,
    15903758,
    15903759,
    15903760,
    15903761,
    15903762,
    15903763,
    15903764,
    15903765,
    15903766,
    15903767,
    15903768,
    15903769,
    15903770,
    15903771,
    15903772,
    15903773,
    15903774,
    15903775,
    15903776,
    15903777,
    15903778,
    15903779,
    15903780,
    15903781,
    15903782,
    15903783,
    15903784,
    15903785,
    15903786,
    15903787,
    15903788,
    15903789,
    15903790,
    15903791,
    15903792,
    15903793,
    15903794,
    15903795,
    15903796,
    15903797,
    15903798,
    15903799,
    15903800,
    15903801,
    15903802,
    15903803,
    15903804,
    15903805,
    15903806,
    15903807,
    15903808,
    15903809,
    15903810,
    15903811,
    15903812,
    15903813,
    15903814,
    15903815,
    15903816,
    15903817,
    15903818,
    15903819,
    15903820,
    15903821,
    15903822,
    15903823,
    15903824,
    15903825,
    15903826,
    15903827,
    15903828,
    15903829,
    15903830,
    15903831,
    15903832,
    15903833,
    15903834,
    15903835,
    15903836,
    15903837,
    15903838,
    15903839,
    15903840,
    15903841,
    15903842,
    15903843,
    15903844,
    15903845,
    15903846,
    15903847,
    15903848,
    15903849,
    15903850,
    15903851,
    15903852,
    15903853,
    15903854,
    15903855,
    15903856,
    15903857,
    15903858,
    15903859,
    15903860,
    15903861,
    15903862,
    15903863,
    15903864,
    15903865,
    15903866,
    15903867,
    15903868,
    15903869,
    15903870,
    15903871,
    15903872,
    15903873,
    15903874,
    15903875,
    15903876,
    15903877,
    15903878,
    15903879,
    15903880,
    15903881,
    15903882,
    15903883,
    15903884,
    15903885,
    15903886,
    15903887,
    15903888,
    15903889,
    15903890,
    15903891,
    15903892,
    15903893,
    15903894,
    15903895,
    15903896,
    15903897,
    15903898,
    15903899,
    15903900,
    15903901,
    15903902,
    15903903,
    15903904,
    15903905,
    15903906,
    15903907,
    15903908,
    15903909,
    15903910,
    15903911,
    15903912,
    15903913,
    15903914,
    15903915,
    15903916,
    15903917,
    15903918,
    15903919,
    15903920,
    15903921,
    15903922,
    15903923,
    15903924,
    15903925,
    15903926,
    15903927,
    15903928,
    15903929,
    15903930,
    15903931,
    15903932,
    15903933,
    15903934,
    15903935,
    15903936,
    15903937,
    15903938,
    15903939,
    15903940,
    15903941,
    15903942,
    15903943,
    15903944,
    15903945,
    15903946,
    15903947,
    15903948,
    15903949,
    15903950,
    15903951,
    15903952,
    15903953,
    15903954,
    15903955,
    15903956,
    15903957,
    15903958,
    15903959,
    15903960,
    15903961,
    15903962,
    15903963,
    15903964,
    15903965,
    15903966,
    15903967,
    15903968,
    15903969,
    15903970,
    15903971,
    15903972,
    15903973,
    15903974,
    15903975,
    15903976,
    15903977,
    15903978,
    15903979,
    15903980,
    15903981,
    15903982,
    15903983,
    15903984,
    15903985,
    15903986,
    15903987,
    15903988,
    15903989,
    15903990,
    15903991,
    15903992,
    15903993,
    15903994,
    15903995,
    15903996,
    15903997,
    15903998,
    15903999,
    15904000,
    15904001,
    15904002,
    15904003,
    15904004,
    15904005,
    15904006,
    15904007,
    15904008,
    15904009,
    15904010,
    15904011,
    15904012,
    15904013,
    15904014,
    15904015,
    15904016,
    15904017,
    15904018,
    15904019,
    15904020,
    15904021,
    15904022,
    15904023,
    15904024,
    15904025,
    15904026,
    15904027,
    15904028,
    15904029,
    15904030,
    15904031,
    15904032,
    15904033,
    15904034,
    15904035,
    15904036,
    15904037,
    15904038,
    15904039,
    15904040,
    15904041,
    15904042,
    15904043,
    15904044,
    15904045,
    15904046,
    15904047,
    15904048,
    15904049,
    15904050,
    15904051,
    15904052,
    15904053,
    15904054,
    15904055,
    15904056,
    15904057,
    15904058,
    15904059,
    15904060,
    15904061,
    15904062,
    15904063,
    15904064,
    15904065,
    15904066,
    15904067,
    15904068,
    15904069,
    15904070,
    15904071,
    15904072,
    15904073,
    15904074,
    15904075,
    15904076,
    15904077,
    15904078,
    15904079,
    15904080,
    15904081,
    15904082,
    15904083,
    15904084,
    15904085,
    15904086,
    15904087,
    15904088,
    15904089,
    15904090,
    15904091,
    15904092,
    15904093,
    15904094,
    15904095,
    15904096,
    15904097,
    15904098,
    15904099,
    15904100,
    15904101,
    15904102,
    15904103,
    15904104,
    15904105,
    15904106,
    15904107,
    15904108,
    15904109,
    15904110,
    15904111,
    15904112,
    15904113,
    15904114,
    15904115,
    15904116,
    15904117,
    15904118,
    15904119,
    15904120,
    15904121,
    15904122,
    15904123,
    15904124,
    15904125,
    15904126,
    15904127,
    15904128,
    15904129,
    15904130,
    15904131,
    15904132,
    15904133,
    15904134,
    15904135,
    15904136,
    15904137,
    15904138,
    15904139,
    15904140,
    15904141,
    15904142,
    15904143,
    15904144,
    15904145,
    15904146,
    15904147,
    15904148,
    15904149,
    15904150,
    15904151,
    15904152,
    15904153,
    15904154,
    15904155,
    15904156,
    15904157,
    15904158,
    15904159,
    15904160,
    15904161,
    15904162,
    15904163,
    15904164,
    15904165,
    15904166,
    15904167,
    15904168,
    15904169,
    15904170,
    15904171,
    15904172,
    15904173,
    15904174,
    15904175,
    15904176,
    15904177,
    15904178,
    15904179,
    15904180,
    15904181,
    15904182,
    15904183,
    15904184,
    15904185,
    15904186,
    15904187,
    15904188,
    15904189,
    15904190,
    15904191,
    15904192,
    15904193,
    15904194,
    15904195,
    15904196,
    15904197,
    15904198,
    15904199,
    15904200,
    15904201,
    15904202,
    15904203,
    15904204,
    15904205,
    15904206,
    15904207,
    15904208,
    15904209,
    15904210,
    15904211,
    15904212,
    15904213,
    15904214,
    15904215,
    15904216,
    15904217,
    15904218,
    15904219,
    15904220,
    15904221,
    15904222,
    15904223,
    15904224,
    15904225,
    15904226,
    15904227,
    15904228,
    15904229,
    15904230,
    15904231,
    15904232,
    15904233,
    15904234,
    15904235,
    15904236,
    15904237,
    15904238,
    15904239,
    15904240,
    15904241,
    15904242,
    15904243,
    15904244,
    15904245,
    15904246,
    15904247,
    15904248,
    15904249,
    15904250,
    15904251,
    15904252,
    15904253,
    15904254,
    15904255,
    15904256,
    15904257,
    15904258,
    15904259,
    15904260,
    15904261,
    15904262,
    15904263,
    15904264,
    15904265,
    15904266,
    15904267,
    15904268,
    15904269,
    15904270,
    15904271,
    15904272,
    15904273,
    15904274,
    15904275,
    15904276,
    15904277,
    15904278,
    15904279,
    15904280,
    15904281,
    15904282,
    15904283,
    15904284,
    15904285,
    15904286,
    15904287,
    15904288,
    15904289,
    15904290,
    15904291,
    15904292,
    15904293,
    15904294,
    15904295,
    15904296,
    15904297,
    15904298,
    15904299,
    15904300,
    15904301,
    15904302,
    15904303,
    15904304,
    15904305,
    15904306,
    15904307,
    15904308,
    15904309,
    15904310,
    15904311,
    15904312,
    15904313,
    15904314,
    15904315,
    15904316,
    15904317,
    15904318,
    15904319,
    15904320,
    15904321,
    15904322,
    15904323,
    15904324,
    15904325,
    15904326,
    15904327,
    15904328,
    15904329,
    15904330,
    15904331,
    15904332,
    15904333,
    15904334,
    15904335,
    15904336,
    15904337,
    15904338,
    15904339,
    15904340,
    15904341,
    15904342,
    15904343,
    15904344,
    15904345,
    15904346,
    15904347,
    15904348,
    15904349,
    15904350,
    15904351,
    15904352,
    15904353,
    15904354,
    15904355,
    15904356,
    15904357,
    15904358,
    15904359,
    15904360,
    15904361,
    15904362,
    15904363,
    15904364,
    15904365,
    15904366,
    15904367,
    15904368,
    15904369,
    15904370,
    15904371,
    15904372,
    15904373,
    15904374,
    15904375,
    15904376,
    15904377,
    15904378,
    15904379,
    15904380,
    15904381,
    15904382,
    15904383,
    15904384,
    15904385,
    15904386,
    15904387,
    15904388,
    15904389,
    15904390,
    15904391,
    15904392,
    15904393,
    15904394,
    15904395,
    15904396,
    15904397,
    15904398,
    15904399,
    15904400,
    15904401,
    15904402,
    15904403,
    15904404,
    15904405,
    15904406,
    15904407,
    15904408,
    15904409,
    15904410,
    15904411,
    15904412,
    15904413,
    15904414,
    15904415,
    15904416,
    15904417,
    15904418,
    15904419,
    15904420,
    15904421,
    15904422,
    15904423,
    15904424,
    15904425,
    15904426,
    15904427,
    15904428,
    15904429,
    15904430,
    15904431,
    15904432,
    15904433,
    15904434,
    15904435,
    15904436,
    15904437,
    15904438,
    15904439,
    15904440,
    15904441,
    15904442,
    15904443,
    15904444,
    15904445,
    15904446,
    15904447,
    15904448,
    15904449,
    15904450,
    15904451,
    15904452,
    15904453,
    15904454,
    15904455,
    15904456,
    15904457,
    15904458,
    15904459,
    15904460,
    15904461,
    15904462,
    15904463,
    15904464,
    15904465,
    15904466,
    15904467,
    15904468,
    15904469,
    15904470,
    15904471,
    15904472,
    15904473,
    15904474,
    15904475,
    15904476,
    15904477,
    15904478,
    15904479,
    15904480,
    15904481,
    15904482,
    15904483,
    15904484,
    15904485,
    15904486,
    15904487,
    15904488,
    15904489,
    15904490,
    15904491,
    15904492,
    15904493,
    15904494,
    15904495,
    15904496,
    15904497,
    15904498,
    15904499,
    15904500,
    15904501,
    15904502,
    15904503,
    15904504,
    15904505,
    15904506,
    15904507,
    15904508,
    15904509,
    15904510,
    15904511,
    15904512,
    15904513,
    15904514,
    15904515,
    15904516,
    15904517,
    15904518,
    15904519,
    15904520,
    15904521,
    15904522,
    15904523,
    15904524,
    15904525,
    15904526,
    15904527,
    15904528,
    15904529,
    15904530,
    15904531,
    15904532,
    15904533,
    15904534,
    15904535,
    15904536,
    15904537,
    15904538,
    15904539,
    15904540,
    15904541,
    15904542,
    15904543,
    15904544,
    15904545,
    15904546,
    15904547,
    15904548,
    15904549,
    15904550,
    15904551,
    15904552,
    15904553,
    15904554,
    15904555,
    15904556,
    15904557,
    15904558,
    15904559,
    15904560,
    15904561,
    15904562,
    15904563,
    15904564,
    15904565,
    15904566,
    15904567,
    15904568,
    15904569,
    15904570,
    15904571,
    15904572,
    15904573,
    15904574,
    15904575,
    15904576,
    15904577,
    15904578,
    15904579,
    15904580,
    15904581,
    15904582,
    15904583,
    15904584,
    15904585,
    15904586,
    15904587,
    15904588,
    15904589,
    15904590,
    15904591,
    15904592,
    15904593,
    15904594,
    15904595,
    15904596,
    15904597,
    15904598,
    15904599,
    15904600,
    15904601,
    15904602,
    15904603,
    15904604,
    15904605,
    15904606,
    15904607,
    15904608,
    15904609,
    15904610,
    15904611,
    15904612,
    15904613,
    15904614,
    15904615,
    15904616,
    15904617,
    15904618,
    15904619,
    15904620,
    15904621,
    15904622,
    15904623,
    15904624,
    15904625,
    15904626,
    15904627,
    15904628,
    15904629,
    15904630,
    15904631,
    15904632,
]

const latestInteractionsRepo = () => SharedTables.getRepository(EthLatestInteraction)

class EthRangeWorker {
    from: number

    to: number | null

    groupSize: number

    saveBatchMultiple: number

    cursor: number

    upsertConstraints: StringKeyMap

    batchResults: any[] = []

    batchBlockNumbersIndexed: number[] = []

    batchExistingBlocksMap: { [key: number]: IndexedBlock } = {}

    chunkSize: number = 2000

    saveBatchIndex: number = 0

    constructor(from: number, to?: number | null, groupSize?: number, saveBatchMultiple?: number) {
        this.from = from
        this.to = to
        this.cursor = from
        this.groupSize = groupSize || 1
        // this.saveBatchMultiple = saveBatchMultiple || 1
        this.saveBatchMultiple = 1
        this.upsertConstraints = {}
    }

    async run() {
        for (const number of missingBlockNumbers) {
            await this._indexBlockGroup([number])
        }
        // while (this.cursor < this.to) {
        //     const start = this.cursor
        //     const end = Math.min(this.cursor + this.groupSize - 1, this.to)
        //     const groupBlockNumbers = range(start, end)
        //     await this._indexBlockGroup(groupBlockNumbers)
        //     this.cursor = this.cursor + this.groupSize
        // }
        // if (this.batchResults.length) {
        //     await this._saveBatches(
        //         this.batchBlockNumbersIndexed,
        //         this.batchResults,
        //         this.batchExistingBlocksMap
        //     )
        // }
        logger.info('DONE')
    }

    async _indexBlockGroup(blockNumbers: number[]) {
        // Get the indexed blocks for these numbers from our registry (Indexer DB).
        // const existingIndexedBlocks = await this._getIndexedBlocksInNumberRange(blockNumbers)
        const existingIndexedBlocks = []
        if (existingIndexedBlocks === null) return // is only null on failure

        // Map existing blocks by number.
        const existingIndexedBlocksMap = {}
        for (const existingIndexedBlock of existingIndexedBlocks) {
            existingIndexedBlocksMap[Number(existingIndexedBlock.number)] = existingIndexedBlock
        }

        // Start indexing this block group.
        const blockNumbersIndexed = []
        const indexResultPromises = []
        for (const blockNumber of blockNumbers) {
            const existingIndexedBlock = existingIndexedBlocksMap[blockNumber]

            // Only index blocks that haven't been indexed before or have previously failed.
            const shouldIndexBlock = !existingIndexedBlock || existingIndexedBlock.failed
            if (!shouldIndexBlock) continue

            blockNumbersIndexed.push(blockNumber)
            indexResultPromises.push(this._indexBlock(blockNumber))
        }

        // Don't do anything if the entire block group has already *successfully* been indexed.
        if (!blockNumbersIndexed.length) return

        logger.info(`Indexing ${blockNumbers[0]} --> ${blockNumbers[blockNumbers.length - 1]}...`)

        // Index block group in parallel.
        const indexResults = await Promise.all(indexResultPromises)

        this.batchBlockNumbersIndexed.push(...blockNumbersIndexed)
        this.batchResults.push(...indexResults)
        this.batchExistingBlocksMap = {
            ...this.batchExistingBlocksMap,
            ...existingIndexedBlocksMap,
        }
        this.saveBatchIndex++

        if (this.saveBatchIndex === this.saveBatchMultiple) {
            this.saveBatchIndex = 0
            const batchBlockNumbersIndexed = [...this.batchBlockNumbersIndexed]
            const batchResults = [...this.batchResults]
            const batchExistingBlocksMap = { ...this.batchExistingBlocksMap }
            await this._saveBatches(batchBlockNumbersIndexed, batchResults, batchExistingBlocksMap)
            this.batchBlockNumbersIndexed = []
            this.batchResults = []
            this.batchExistingBlocksMap = {}
        }
    }

    async _saveBatches(
        batchBlockNumbersIndexed: number[] = [],
        batchResults: any[],
        batchExistingBlocksMap: { [key: number]: IndexedBlock } = {}
    ) {
        const t0 = performance.now()
        try {
            await this._saveBatchResults(batchResults)
        } catch (err) {
            logger.error(`Error saving batch: ${err}`)
            return [null, false]
        }
        const t1 = performance.now()

        // Group index results by block number.
        const retriedBlockNumbersThatSucceeded = []
        const inserts = []
        for (let i = 0; i < batchBlockNumbersIndexed.length; i++) {
            const blockNumber = batchBlockNumbersIndexed[i]
            const result = batchResults[i]
            const succeeded = !!result

            if (!succeeded) {
                logger.error(`Indexing Block Failed: ${blockNumber}`)
            }

            // If the indexed block already existed, but now succeeded, just update the 'failed' status.
            const existingIndexedBlock = batchExistingBlocksMap[blockNumber]
            if (existingIndexedBlock) {
                succeeded && retriedBlockNumbersThatSucceeded.push(existingIndexedBlock.id)
                continue
            }

            // Fresh new indexed block entries.
            inserts.push({
                chainId: config.CHAIN_ID,
                number: blockNumber,
                hash: result?.block?.hash,
                status: IndexedBlockStatus.Complete,
                failed: !succeeded,
            })
        }

        let persistResultPromises = []
        // Persist updates.
        retriedBlockNumbersThatSucceeded.length &&
            persistResultPromises.push(
                setIndexedBlocksToSucceeded(retriedBlockNumbersThatSucceeded)
            )
        // Persist inserts.
        inserts.length && persistResultPromises.push(insertIndexedBlocks(inserts))
        try {
            await Promise.all(persistResultPromises)
        } catch (err) {
            logger.error(
                `Error persisting indexed block results to DB for block range: ${batchBlockNumbersIndexed}`,
                err
            )
        }
    }

    async _indexBlock(blockNumber: number): Promise<StringKeyMap | null> {
        let result
        try {
            result = await getIndexer(this._atNumber(blockNumber)).perform()
        } catch (err) {
            logger.error(`Error indexing block ${blockNumber}:`, err)
            return null
        }
        if (!result) return null

        return result as StringKeyMap
    }

    async _getIndexedBlocksInNumberRange(blockNumbers: number[]): Promise<IndexedBlock[] | null> {
        try {
            return await getBlocksInNumberRange(config.CHAIN_ID, blockNumbers)
        } catch (err) {
            logger.error(
                `Error getting indexed_blocks from DB for block range: ${blockNumbers}`,
                err
            )
            return null
        }
    }

    _atNumber(blockNumber: number): NewReportedHead {
        return {
            id: 0,
            chainId: config.CHAIN_ID,
            blockNumber,
            blockHash: null,
            replace: false,
        }
    }

    async _saveBatchResults(results: any[]) {
        let blocks = []
        let transactions = []
        let logs = []
        let traces = []
        let contracts = []
        let latestInteractions = []

        for (const result of results) {
            if (!result) continue
            blocks.push({ ...result.block, timestamp: () => result.pgBlockTimestamp })
            transactions.push(
                ...result.transactions.map((t) => ({
                    ...t,
                    blockTimestamp: () => result.pgBlockTimestamp,
                }))
            )
            logs.push(
                ...result.logs.map((l) => ({ ...l, blockTimestamp: () => result.pgBlockTimestamp }))
            )
            traces.push(
                ...result.traces.map((t) => ({
                    ...t,
                    blockTimestamp: () => result.pgBlockTimestamp,
                }))
            )
            contracts.push(
                ...result.contracts.map((c) => ({
                    ...c,
                    blockTimestamp: () => result.pgBlockTimestamp,
                }))
            )
            latestInteractions.push(
                ...result.latestInteractions.map((c) => ({
                    ...c,
                    timestamp: () => result.pgBlockTimestamp,
                }))
            )
        }

        if (!this.upsertConstraints.block && blocks.length) {
            this.upsertConstraints.block = fullBlockUpsertConfig(blocks[0])
        }
        if (!this.upsertConstraints.transaction && transactions.length) {
            this.upsertConstraints.transaction = fullTransactionUpsertConfig(transactions[0])
        }
        if (!this.upsertConstraints.log && logs.length) {
            this.upsertConstraints.log = fullLogUpsertConfig(logs[0])
        }
        if (!this.upsertConstraints.trace && traces.length) {
            this.upsertConstraints.trace = fullTraceUpsertConfig(traces[0])
        }
        if (!this.upsertConstraints.contract && contracts.length) {
            this.upsertConstraints.contract = fullContractUpsertConfig(contracts[0])
        }
        if (!this.upsertConstraints.latestInteraction && latestInteractions.length) {
            this.upsertConstraints.latestInteraction = fullLatestInteractionUpsertConfig(
                latestInteractions[0]
            )
        }

        blocks = this.upsertConstraints.block
            ? uniqueByKeys(blocks, this.upsertConstraints.block[1])
            : blocks

        transactions = this.upsertConstraints.transaction
            ? uniqueByKeys(transactions, this.upsertConstraints.transaction[1])
            : transactions

        logs = this.upsertConstraints.log ? uniqueByKeys(logs, ['logIndex', 'transactionHash']) : logs

        traces = this.upsertConstraints.trace
            ? uniqueByKeys(traces, this.upsertConstraints.trace[1])
            : traces

        contracts = this.upsertConstraints.contract
            ? uniqueByKeys(contracts, this.upsertConstraints.contract[1])
            : contracts

        latestInteractions = latestInteractions.sort((a, b) => b.blockNumber - a.blockNumber)
        latestInteractions = this.upsertConstraints.latestInteraction
            ? uniqueByKeys(latestInteractions, this.upsertConstraints.latestInteraction[1])
            : latestInteractions

        await SharedTables.manager.transaction(async (tx) => {
            tx.createQueryBuilder().insert().orUpdate
            await Promise.all([
                this._upsertBlocks(blocks, tx),
                this._upsertTransactions(transactions, tx),
                this._upsertLogs(logs, tx),
                this._upsertTraces(traces, tx),
                this._upsertContracts(contracts, tx),
                this._upsertLatestInteractions(latestInteractions, tx),
            ])
        })
    }

    async _upsertBlocks(blocks: StringKeyMap[], tx: any) {
        if (!blocks.length) return
        const [updateBlockCols, conflictBlockCols] = this.upsertConstraints.block
        await tx
            .createQueryBuilder()
            .insert()
            .into(EthBlock)
            .values(blocks)
            .orUpdate(updateBlockCols, conflictBlockCols)
            .execute()
    }

    async _upsertTransactions(transactions: StringKeyMap[], tx: any) {
        if (!transactions.length) return
        logger.info(`Saving ${transactions.length} transactions...`)
        const [updateTransactionCols, conflictTransactionCols] = this.upsertConstraints.transaction
        await Promise.all(
            toChunks(transactions, this.chunkSize).map((chunk) => {
                return tx
                    .createQueryBuilder()
                    .insert()
                    .into(EthTransaction)
                    .values(chunk)
                    .orUpdate(updateTransactionCols, conflictTransactionCols)
                    .execute()
            })
        )
    }

    async _upsertLogs(logs: StringKeyMap[], tx: any) {
        if (!logs.length) return
        logger.info(`Saving ${logs.length} logs...`)
        const [updateLogCols, conflictLogCols] = this.upsertConstraints.log
        await Promise.all(
            toChunks(logs, this.chunkSize).map((chunk) => {
                return tx
                    .createQueryBuilder()
                    .insert()
                    .into(EthLog)
                    .values(chunk)
                    .orUpdate(updateLogCols, conflictLogCols)
                    .execute()
            })
        )
    }

    async _upsertTraces(traces: StringKeyMap[], tx: any) {
        if (!traces.length) return
        logger.info(`Saving ${traces.length} traces...`)
        const [updateTraceCols, conflictTraceCols] = this.upsertConstraints.trace
        await Promise.all(
            toChunks(traces, this.chunkSize).map((chunk) => {
                return tx
                    .createQueryBuilder()
                    .insert()
                    .into(EthTrace)
                    .values(chunk)
                    .orUpdate(updateTraceCols, conflictTraceCols)
                    .execute()
            })
        )
    }

    async _upsertContracts(contracts: StringKeyMap[], tx: any) {
        if (!contracts.length) return
        logger.info(`Saving ${contracts.length} contracts...`)
        const [updateContractCols, conflictContractCols] = this.upsertConstraints.contract
        await Promise.all(
            toChunks(contracts, this.chunkSize).map((chunk) => {
                return tx
                    .createQueryBuilder()
                    .insert()
                    .into(EthContract)
                    .values(chunk)
                    .orUpdate(updateContractCols, conflictContractCols)
                    .execute()
            })
        )
    }

    async _upsertLatestInteractions(latestInteractions: StringKeyMap[], tx: any) {
        if (!latestInteractions.length) return
        const chunks = toChunks(latestInteractions, this.chunkSize)
        const [updateCols, conflictCols] = this.upsertConstraints.latestInteraction

        for (const chunk of chunks) {
            const existingLatestInteractions = (await latestInteractionsRepo().find({
                select: { from: true, to: true, blockNumber: true },
                where: chunk.map(li => ({ from: li.from, to: li.to }))
            })) || []
            const latestBlockNumberForGroup = {}
            for (const li of existingLatestInteractions) {
                latestBlockNumberForGroup[[li.from, li.to].join(':')] = li.blockNumber
            }
            const latestInteractionsToUpsert = []
            for (const li of chunk) {
                const lastBlockNumber = existingLatestInteractions[[li.from, li.to].join(':')]
                if (!lastBlockNumber || Number(li.blockNumber) > Number(lastBlockNumber)) {
                    latestInteractionsToUpsert.push(li)
                }
            }
            if (!latestInteractionsToUpsert.length) continue
            logger.info(`Saving ${latestInteractionsToUpsert.length} latest interactions...`)
            await tx
                .createQueryBuilder()
                .insert()
                .into(EthLatestInteraction)
                .values(latestInteractionsToUpsert)
                .orUpdate(updateCols, conflictCols)
                .execute()
        }
        // const [updateCols, conflictCols] = this.upsertConstraints.latestInteraction
        // await Promise.all(
                // return tx
                //     .createQueryBuilder()
                //     .insert()
                //     .into(EthLatestInteraction)
                //     .values(chunk)
                //     .orUpdate(updateCols, conflictCols)
                //     .execute()
            // })
        // )
    }
}

export function getEthRangeWorker(): EthRangeWorker {
    return new EthRangeWorker(
        config.FROM,
        config.TO,
        config.RANGE_GROUP_SIZE,
        config.SAVE_BATCH_MULTIPLE
    )
}
