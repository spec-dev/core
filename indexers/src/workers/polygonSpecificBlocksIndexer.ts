import config from '../config'
import { getIndexer } from '../indexers'
import {
    insertIndexedBlocks,
    setIndexedBlocksToSucceeded,
    logger,
    NewReportedHead,
    IndexedBlockStatus,
    IndexedBlock,
    getBlocksInNumberRange,
    range,
    StringKeyMap,
    PolygonBlock,
    PolygonLog,
    PolygonTransaction,
    fullPolygonBlockUpsertConfig,
    fullPolygonLogUpsertConfig,
    fullPolygonTransactionUpsertConfig,
    SharedTables,
    uniqueByKeys,
    formatAbiValueWithType,
    PolygonTrace,
    PolygonContract,
    toChunks,
    fullTraceUpsertConfig,
    fullContractUpsertConfig,
    fullErc20TokenUpsertConfig,
    fullNftCollectionUpsertConfig,
    snakeToCamel,
    CoreDB,
    Erc20Token,
    NftCollection,
    ContractInstance,
} from '../../../shared'
import { exit } from 'process'

const contractInstancesRepo = () => CoreDB.getRepository(ContractInstance)

// const redo = [
//     34889335,
//     34889336,
// ]

const redo = [
    41547543,
    41044581,
    41147553,
    41570605,
    42353148,
    42349931,
    41616114,
    42416690,
    42020762,
    42050811,
    42592109,
    42001679,
    42242912,
    42365740,
    42731925,
    42253121,
    41322735,
    42134548,
    40711621,
    42091661,
    42134558,
    41394677,
    40790803,
    41987102,
    41381939,
    41346218,
    42360992,
    40475641,
    40603345,
    42052970,
    42293662,
    41938594,
    41302119,
    42360996,
    42416713,
    42797780,
    41923665,
    42757213,
    42074316,
    42216654,
    41543538,
    42497263,
    42416677,
    40603346,
    42360991,
    42370302,
    42719385,
    42772046,
    42050820,
    42040393,
    42048973,
    40714021,
    41985121,
    42134557,
    42814015,
    41833852,
    41349423,
    41545135,
    41533491,
    40791603,
    40537511,
    42065336,
    42102958,
    42416581,
    41673687,
    42453454,
    40790006,
    40619170,
    40603217,
    40789208,
    41923668,
    40790810,
    42607675,
    41071957,
    41148352,
    40790809,
    40714017,
    40515272,
    41443404,
    42723445,
    42702282,
    41147555,
    41931209,
    41180062,
    42431335,
    41756845,
    42182126,
    42007627,
    41277971,
    41931207,
    41974814,
    41394658,
    42416685,
    42416692,
    41710099,
    41513935,
    40713225,
    41931201,
    41151561,
    41303717,
    41964587,
    42365742,
    41682865,
    42127665,
    40711622,
    42242914,
    41543536,
    41015176,
    42267081,
    41085515,
    41148359,
    42280704,
    42702279,
    41693515,
    42814104,
    42050818,
    42365743,
    41627622,
    42814016,
    41691743,
    42192815,
    42789049,
    42048974,
    41044587,
    42774441,
    42814109,
    42765777,
    41003977,
    42065350,
    42146976,
    42416649,
    40788409,
    42065349,
    41673681,
    40651387,
    41964583,
    40522141,
    42229552,
    40522133,
    41673685,
    41085516,
    42079112,
    42253126,
    41964588,
    41569003,
    41180064,
    42106895,
    41090835,
    41638528,
    42074321,
    42134553,
    41342809,
    42353144,
    42052973,
    42134559,
    41394660,
    40522137,
    42192807,
    41725838,
    40715623,
    40522134,
    41923655,
    41922063,
    41443405,
    42497264,
    41149956,
    41277972,
    40790005,
    42020761,
    41085506,
    42404408,
    42487886,
    42035809,
    42404409,
    41974813,
    41151554,
    40579885,
    41008232,
    41163539,
    40520533,
    41478950,
    41859014,
    42554340,
    41513934,
    40684798,
    42356191,
    42108494,
    42842898,
    42360989,
    40790800,
    41276452,
    42267083,
    41616119,
    42727925,
    41380743,
    42416587,
    42798205,
    42128934,
    42798203,
    41851235,
    42192812,
    42351535,
    41394675,
    42253123,
    41061938,
    42192814,
    42416682,
    42702280,
    41293138,
    42253835,
    41877839,
    42650611,
    41923663,
    41154426,
    40585988,
    41044585,
    42607672,
    41682860,
    40789200,
    42416719,
    40520534,
    42650604,
    41342813,
    42040402,
    41146760,
    41085514,
    41276462,
    41673595,
    42772048,
    40715624,
    40712421,
    41708022,
    41708023,
    42030865,
    42052971,
    42554345,
    40713216,
    41150088,
    42007628,
    42416703,
    40790804,
    41931206,
    40475636,
    40789206,
    41877840,
    41007372,
    42796761,
    42349928,
    42128931,
    42087775,
    42797783,
    41543532,
    41044583,
    41146896,
    42050815,
    42609534,
    42007632,
    41293129,
    42416657,
    40711616,
    41876557,
    41146758,
    40651382,
    41651406,
    42789052,
    41212143,
    42393549,
    42501500,
    41163542,
    42393553,
    42642148,
    42040397,
    42650601,
    41458128,
    40790807,
    42415760,
    42794763,
    42134551,
    42349936,
    42568506,
    40791602,
    42797789,
    42141120,
    42633404,
    40482966,
    41342814,
    40734211,
    40482967,
    42500462,
    42449678,
    40711617,
    41278246,
    42192817,
    42141112,
    40684802,
    41682859,
    41569006,
    40522139,
    41515534,
    42811245,
    41931199,
    41478948,
    41146895,
    40734206,
    41877358,
    42242911,
    42554339,
    41277797,
    41276459,
    42690504,
    42253112,
    42416661,
    40790811,
    40714018,
    41693522,
    41180066,
    42030862,
    41682863,
    41647424,
    40520542,
    41292291,
    41576926,
    40690544,
    41625166,
    41146898,
    42038796,
    42035806,
    42416686,
    42633405,
    42607677,
    40715620,
    41083858,
    42416684,
    41682853,
    42353143,
    42733944,
    42789053,
    41691742,
    41346215,
    40716422,
    38837065,
    42416656,
    41090836,
    41276456,
    42134554,
    41346226,
    42757208,
    41346217,
    42035807,
    40715627,
    38837073,
    41923656,
    41151555,
    41009773,
    41009769,
    40790011,
    42757209,
    42020750,
    41651404,
    41644177,
    41631559,
    42128943,
    42723448,
    41394662,
    41071958,
    42082643,
    41914909,
    42416714,
    38837072,
    41668348,
    41931198,
    42794765,
    41085503,
    41441806,
    42087774,
    42554336,
    40716423,
    42797782,
    42723439,
    41149156,
    41293130,
    42030858,
    41443406,
    41003973,
    41459630,
    41969308,
    42690507,
    41851233,
    42796300,
    41044336,
    42038215,
    41559869,
    41276453,
    40651380,
    42798204,
    42253840,
    42128935,
    42038799,
    42192805,
    40522144,
    41478947,
    41442607,
    40712416,
    42772045,
    41010280,
    41148354,
    41277959,
    42007629,
    42554344,
    42007630,
    42416717,
    41516526,
    42050807,
    42020754,
    41106110,
    42050821,
    42416700,
    42253113,
    40774206,
    40537512,
    42789050,
    41570629,
    40716417,
    41044584,
    40475640,
    41645806,
    41690320,
    41644178,
    42795567,
    42050346,
    41693521,
    42585017,
    41533484,
    40714818,
    41322736,
    42554343,
    40712418,
    42065344,
    42416701,
    40712422,
    40711623,
    41693517,
    42584483,
    42568505,
    41346224,
    40517469,
    41394681,
    42416733,
    42592655,
    42074315,
    41147563,
    42079116,
    41324338,
    41437487,
    41878958,
    42794767,
    41877359,
    42216653,
    41682871,
    41923669,
    41180058,
    41277958,
    41651405,
    42020760,
    41302631,
    42416584,
    41148361,
    42193501,
    41570600,
    42453457,
    41007373,
    42173967,
    41163536,
    41293137,
    41394671,
    42108495,
    42267079,
    41638532,
    41818786,
    41123046,
    42416675,
    41559871,
    42267084,
    40522142,
    41212142,
    42723442,
    42485114,
    42797796,
    42370304,
    41149954,
    41163544,
    42814018,
    42253110,
    42065345,
    42500461,
    42043761,
    40550030,
    41163543,
    42568508,
    42714758,
    42353147,
    42642138,
    42192804,
    41673689,
    42796298,
    42792758,
    42253120,
    42416734,
    42052759,
    42393556,
    42074318,
    41827023,
    42138557,
    42585809,
    42650599,
    41147556,
    42253124,
    42370306,
    42650612,
    42585013,
    41985120,
    42830210,
    41964584,
    40517465,
    42796759,
    41693512,
    40603221,
    42723444,
    40714027,
    42796758,
    42157938,
    40684803,
    42485117,
    41003976,
    40734207,
    41336655,
    42690509,
    42349926,
    41180060,
    42074313,
    41515535,
    42796763,
    41458126,
    42607671,
    41877837,
    41009771,
    40759748,
    42157941,
    41616118,
    40695243,
    42356189,
    41150761,
    41519382,
    41543537,
    42757217,
    42393554,
    42830209,
    41833854,
    42404412,
    41310742,
    42404410,
    40603218,
    42416720,
    40517468,
    42774445,
    42792760,
    38837074,
    42607670,
    42866205,
    42789046,
    40603219,
    41975280,
    42052969,
    42642145,
    42719387,
    42371904,
    39219124,
    41708024,
    42293659,
    42046398,
    40788411,
    41324337,
    42727926,
    41673682,
    41150100,
    42416673,
    42040394,
    42081038,
    42416654,
    41007374,
    42050347,
    41616117,
    42798206,
    41644176,
    42795565,
    42043759,
    41885675,
    42020755,
    42650607,
    41293131,
    42765770,
    42585015,
    42128940,
    42356190,
    41150095,
    42416718,
    42253122,
    42253841,
    42020757,
    42074310,
    42789048,
    41690319,
    40789204,
    42585019,
    41302121,
    42774450,
    42353146,
    41180061,
    42690503,
    41533487,
    40714823,
    42106888,
    42485116,
    41151559,
    42650600,
    41276460,
    41559873,
    40715628,
    41923661,
    42719390,
    41044579,
    42349938,
    41083860,
    41092843,
    42134550,
    42293664,
    42107695,
    41443403,
    41543528,
    40684797,
    42192810,
    41500189,
    41108138,
    42128933,
    40774205,
    40518623,
    41510945,
    42719380,
    41725837,
    40520539,
    42416576,
    42062942,
    41569004,
    42453451,
    42796299,
    42085967,
    41349424,
    42719382,
    42416660,
    42772044,
    41979440,
    42216655,
    42796297,
    41007369,
    42038211,
    42134560,
    41893982,
    42192816,
    41346222,
    41885680,
    41535086,
    42416658,
    41346229,
    41682851,
    41148355,
    41459629,
    42592651,
    42789055,
    41823581,
    42607669,
    42797795,
    42052751,
    40734208,
    41146892,
    41914910,
    42798207,
    42579982,
    40714023,
    41015178,
    42128929,
    42054350,
    41693514,
    42074314,
    42182130,
    41668349,
    42579980,
    41459628,
    42192813,
    42416699,
    40651381,
    42141123,
    41342812,
    42255438,
    41682852,
    42772047,
    41673597,
    41150760,
    41381944,
    41009768,
    41342816,
    42404411,
    40770608,
    41149961,
    42489606,
    42001680,
    42642136,
    42050345,
    40463061,
    41150762,
    41668350,
    41008235,
    42052975,
    42416732,
    42007631,
    42765774,
    41756844,
    42349927,
    41310741,
    42020763,
    42293660,
    40712420,
    41342815,
    42065335,
    42393551,
    40510110,
    41009764,
    41150094,
    42192824,
    38837067,
    40716421,
    42554341,
    41149952,
    41085512,
    42416668,
    42416697,
    42568507,
    42757214,
    42091663,
    42138559,
    41442604,
    41149152,
    42040399,
    39467460,
    41543539,
    42757210,
    41015177,
    41278248,
    42416695,
    42796766,
    41149159,
    41150754,
    41381940,
    42349937,
    41543534,
    42642139,
    41559870,
    42141124,
    42650603,
    41559876,
    41893981,
    42719381,
    40537509,
    41007368,
    42040398,
    40788410,
    42416715,
    42632605,
    41180059,
    41827022,
    40684799,
    42854460,
    41774064,
    41015179,
    42157940,
    41083851,
    41003974,
    42416672,
    41342811,
    40711619,
    41007367,
    42099757,
    42416696,
    42353142,
    42814017,
    41147562,
    41149158,
    41346216,
    42607668,
    40791600,
    41146759,
    42583293,
    41277803,
    41150756,
    42107694,
    41150089,
    42065340,
    41442605,
    42128928,
    41510944,
    42757219,
    41969309,
    40715616,
    42592658,
    41276200,
    42356192,
    41150753,
    42106899,
    41346219,
    40715626,
    42797787,
    40788408,
    42416702,
    42795566,
    41559877,
    41146754,
    42192821,
    41885676,
    42106891,
    42066302,
    42866206,
    40520538,
    41277807,
    42052753,
    41083850,
    42156941,
    42170763,
    40788400,
    41969312,
    41877357,
    41149160,
    42050822,
    41276454,
    42416642,
    41394682,
    42650609,
    41638531,
    42091662,
    41146894,
    42052750,
    41310740,
    41302630,
    41381943,
    42796293,
    42085966,
    41885679,
    41823583,
    41150763,
    42416669,
    42065347,
    40714828,
    40711624,
    41312628,
    42416644,
    42690505,
    40713220,
    41774062,
    42141121,
    40537510,
    41710098,
    42079119,
    41108137,
    41061939,
    42351534,
    41533485,
    42797779,
    41682854,
    40715617,
    42859545,
    40770609,
    42789054,
    42360990,
    42796757,
    40515273,
    41459627,
    42161142,
    40603220,
    41673679,
    42554337,
    41647407,
    42043763,
    42365739,
    41146891,
    41500191,
    42797786,
    42074320,
    42814110,
    41681629,
    41394680,
    41876555,
    41293133,
    42128941,
    42267080,
    40790806,
    40789202,
    42796296,
    42416679,
    42579981,
    42079113,
    40651384,
    42453455,
    41394668,
    41478946,
    41087641,
    41085505,
    41394665,
    42489609,
    42195214,
    42798198,
    41009765,
    42108493,
    41922062,
    41009767,
    40603347,
    42765775,
    42416698,
    42134563,
    42854463,
    41885682,
    40714016,
    42797781,
    42050809,
    41570606,
    42038798,
    41443408,
    42081039,
    42416646,
    42798199,
    40788405,
    42797794,
    42796760,
    42191214,
    42216656,
    41848255,
    42453456,
    40788407,
    42052749,
    42416680,
    40713219,
    41150099,
    42416681,
    42415761,
    41085510,
    42193503,
    42349930,
    41106910,
    42830208,
    41149959,
    41394664,
    42043762,
    42416693,
    40715621,
    41693516,
    42192823,
    40475639,
    42050812,
    41673596,
    42592108,
    42134546,
    42030860,
    41163535,
    41984705,
    42592656,
    41691741,
    42099755,
    42814116,
    42585810,
    41047800,
    41146897,
    42416678,
    40788406,
    42642137,
    42579983,
    42313006,
    42842897,
    41394673,
    42796292,
    41774061,
    42592657,
    40714817,
    40550029,
    42043766,
    42871437,
    38837069,
    41322737,
    42313005,
    42143408,
    41931204,
    42085964,
    41616113,
    41007370,
    42425599,
    40679553,
    42416676,
    40713221,
    40681968,
    41931197,
    40517466,
    42192818,
    42774443,
    41346221,
    41923670,
    42050350,
    42404405,
    40517462,
    41682856,
    41543535,
    41931200,
    42030859,
    41888480,
    42642144,
    41146889,
    42393550,
    42485113,
    41877838,
    42159539,
    42723446,
    42192820,
    41277806,
    42349935,
    40515275,
    40603343,
    42854462,
    42723441,
    42690513,
    41085513,
    42253118,
    42393552,
    40713227,
    42074311,
    42242913,
    41150092,
    42267077,
    40789203,
    41289103,
    41380742,
    41394667,
    42416651,
    42157939,
    42255437,
    41923658,
    42253836,
    41693518,
    42554338,
    41985119,
    42866207,
    42020759,
    42030866,
    41146756,
    42489486,
    42690511,
    41983295,
    42020758,
    41329929,
    41346225,
    42585011,
    42085965,
    42253839,
    42267085,
    42757211,
    40517463,
    42607678,
    41708026,
    41708021,
    41394679,
    42871438,
    42416650,
    41888479,
    41708027,
    41150097,
    42842379,
    41007371,
    41149953,
    41601373,
    42485119,
    40520541,
    42585811,
    42127666,
    42292061,
    41570627,
    42360997,
    40538365,
    42195213,
    41877835,
    41681628,
    41478953,
    42765769,
    42774446,
    42416674,
    40518624,
    41868066,
    41310744,
    41513936,
    42371906,
    42416727,
    42633412,
    41225388,
    41708019,
    41682873,
    42404414,
    42416710,
    42183662,
    41458127,
    41342810,
    41150759,
    42040401,
    41931202,
    42416659,
    41108134,
    42633403,
    42192819,
    41569005,
    42091660,
    41346223,
    42370301,
    42633409,
    41302118,
    40714020,
    42040392,
    41710095,
    41149962,
    40789207,
    40770607,
    41682872,
    41570604,
    41868065,
    42149010,
    42050817,
    40714819,
    41044582,
    40714019,
    42043765,
    42594622,
    41293134,
    41876560,
    42633407,
    41163541,
    42592653,
    41149957,
    41310749,
    41342819,
    41277800,
    41984702,
    42267082,
    42633406,
    41533486,
    42170768,
    42416577,
    41833573,
    40579888,
    41149958,
    42360995,
    42554342,
    42714761,
    42425598,
    40520535,
    42650608,
    41123047,
    41644175,
    41277957,
    42416706,
    41690316,
    42797798,
    41151552,
    42035810,
    41394661,
    41150090,
    42765778,
    41009774,
    42065343,
    41533489,
    40714826,
    42584210,
    42633411,
    41277801,
    42065348,
    42192822,
    41150091,
    42360998,
    41859017,
    42141113,
    42360988,
    40685742,
    40651383,
    41923671,
    40716419,
    42191215,
    42030856,
    42050805,
    41614799,
    40790002,
    41923659,
    42038213,
    41278251,
    41310747,
    41774060,
    42416648,
    42253125,
    40695242,
    41922065,
    41892382,
    42170765,
    40522132,
    42416716,
    41044334,
    40788403,
    40711620,
    42143407,
    41570599,
    41147560,
    41180065,
    40608144,
    41276461,
    41277967,
    42106897,
    42416704,
    41682861,
    41038256,
    42866208,
    41984703,
    42050819,
    41150098,
    41547538,
    42297137,
    41922064,
    42183661,
    41889983,
    41437489,
    41441805,
    41569000,
    41008233,
    41147558,
    41570608,
    41923662,
    41533490,
    40651389,
    42592654,
    42040395,
    41885677,
    42811246,
    40713217,
    42253838,
    42714762,
    42416666,
    40517461,
    42416709,
    42650606,
    41277799,
    40714824,
    41959898,
    41394669,
    42143405,
    42719389,
    42416711,
    38837071,
    41570602,
    40685743,
    41914911,
    41682869,
    42351533,
    41756846,
    42170766,
    41547540,
    40790802,
    40715618,
    41085504,
    41083856,
    41106111,
    42079120,
    42043760,
    40712417,
    42690508,
    41570607,
    41151558,
    42416730,
    41478952,
    42106898,
    41559875,
    42128930,
    41441807,
    41038255,
    42498863,
    41851234,
    40714816,
    42485118,
    41085509,
    41888481,
    41394672,
    42554346,
    40790801,
    41827021,
    42633410,
    41149161,
    42416647,
    41616115,
    42871439,
    42705278,
    41083855,
    42796303,
    42141117,
    41543529,
    42141119,
    41394678,
    41500190,
    41277955,
    42642141,
    42050816,
    42814013,
    40714827,
    41923660,
    40520536,
    42127664,
    42182127,
    40716424,
    40716420,
    42020752,
    42050823,
    42633402,
    42702278,
    41458130,
    42796295,
    42040400,
    41923664,
    42871440,
    42871435,
    40716425,
    41394663,
    41442606,
    42489485,
    42489608,
    41346228,
    42690512,
    41015182,
    42727924,
    42365746,
    42497262,
    42134545,
    42141122,
    38837070,
    41627623,
    42416708,
    41859015,
    42453452,
    42106889,
    41673678,
    42052748,
    41149153,
    41569007,
    41277974,
    42052747,
    41324339,
    42106896,
    41276458,
    40714825,
    42134556,
    42030857,
    42797790,
    41329928,
    41547539,
    40712424,
    42087776,
    41616112,
    42371905,
    42170769,
    41147554,
    42030864,
    42416726,
    41974812,
    42040403,
    41083852,
    40767774,
    42650602,
    41682866,
    41616116,
    40603344,
    40520540,
    42020753,
    42106900,
    42633395,
    42774442,
    42353140,
    42633416,
    41015181,
    41163538,
    41329927,
    42038212,
    42349932,
    41154425,
    41277973,
    42607676,
    42794764,
    42030861,
    41668547,
    41037616,
    41277798,
    42814106,
    41322734,
    42631810,
    42349941,
    41037614,
    41923667,
    41083854,
    42814107,
    42353141,
    42650605,
    41673688,
    40790000,
    40684796,
    42592111,
    41061937,
    41394659,
    41459632,
    42351532,
    42633401,
    41458125,
    42127667,
    42796302,
    42434143,
    40522140,
    40515274,
    42020756,
    42074319,
    40714025,
    41922057,
    41278249,
    42079118,
    41576925,
    42501502,
    41640982,
    41969310,
    41559874,
    41893983,
    41083848,
    42416722,
    41437488,
    40522130,
    42065339,
    41985122,
    42723443,
    42141118,
    42642143,
    41293132,
    41302122,
    42159538,
    41510943,
    42584212,
    41969311,
    42719383,
    40520543,
    42049549,
    41180056,
    42416723,
    41673683,
    41876556,
    41044580,
    42081040,
    40715619,
    41708025,
    41394674,
    42765773,
    40603216,
    41151556,
    41673684,
    42416731,
    42554348,
    42416687,
    42757218,
    40670543,
    41310743,
    41310745,
    42350734,
    40712423,
    40608143,
    42757215,
    42125552,
    41442603,
    42353145,
    41964582,
    42797791,
    41180067,
    42370303,
    40788402,
    42416707,
    41693513,
    41638527,
    41693523,
    40770606,
    42415763,
    42134555,
    41827020,
    42065342,
    40714822,
    41877841,
    41150087,
    39662773,
    42106886,
    41150755,
    42798200,
    42052754,
    40712419,
    42814105,
    40522135,
    42814014,
    42038214,
    42404407,
    40790007,
    42842895,
    41851237,
    42774444,
    42830211,
    41649813,
    42253127,
    42719384,
    40791601,
    41148356,
    40715622,
    41853632,
    41146755,
    42182128,
    41690317,
    41083857,
    41346227,
    42242909,
    42079115,
    41774059,
    41693520,
    42020751,
    42416662,
    41964580,
    40789210,
    42416705,
    41044586,
    42664046,
    42554349,
    42757212,
    41150757,
    42609535,
    42349933,
    41349422,
    41149154,
    42416694,
    42173966,
    42253116,
    42074312,
    42050810,
    42134549,
    41708028,
    42079117,
    42106887,
    41682864,
    41680029,
    42798208,
    42642140,
    41085508,
    41569001,
    42797792,
    40475637,
    42702281,
    42633399,
    42128932,
    40712427,
    40713224,
    41922058,
    42774449,
    40651386,
    41149960,
    42035808,
    42349940,
    42846879,
    42719386,
    40714022,
    41085507,
    42632607,
    40713226,
    41726160,
    41638530,
    41150093,
    41342817,
    41547542,
    42794766,
    40734209,
    41931203,
    41149155,
    41277796,
    42764026,
    42253119,
    42050351,
    40790805,
    41959897,
    42267078,
    42192809,
    41516525,
    42702277,
    40518622,
    40789209,
    41381938,
    42690510,
    41547541,
    42052974,
    40670542,
    42416665,
    40789212,
    41302120,
    40651388,
    38837068,
    41443407,
    40684800,
    42416655,
    42416653,
    42416725,
    42106902,
    42134547,
    42814113,
    41180063,
    41015180,
    42193502,
    41774063,
    41859013,
    41009770,
    42416670,
    41877836,
    41559872,
    41276457,
    41682862,
    42650613,
    41543533,
    42690515,
    41038257,
    40788404,
    42416671,
    42416683,
    41923653,
    42041417,
    40651385,
    42719391,
    41726161,
    41180057,
    42690517,
    42253109,
    40790808,
    42085968,
    41083859,
    41964581,
    42585018,
    42761735,
    42633408,
    41147552,
    41756847,
    41278250,
    42633413,
    42349934,
    42592660,
    40711626,
    41570603,
    40517464,
    40712425,
    42842896,
    42814108,
    41710097,
    41038258,
    41056185,
    42765776,
    42797793,
    42166296,
    42415762,
    42485115,
    40790010,
    40747646,
    41931210,
    41922059,
    42030868,
    42585812,
    42554347,
    40522136,
    42789047,
    41277805,
    42797788,
    42050813,
    41973742,
    41833853,
    42170767,
    42690506,
    40714821,
    42050806,
    40790001,
    42141116,
    41682858,
    41923666,
    42349939,
    41931205,
    41149157,
    42099756,
    42500463,
    42796765,
    41150758,
    40517467,
    41877356,
    41148360,
    42253117,
    41616109,
    40716418,
    42365738,
    41682870,
    42498861,
    42074317,
    42633396,
    42087772,
    41682857,
    42106893,
    41106109,
    40684801,
    42416729,
    41616110,
    42081037,
    41147564,
    40790009,
    41985123,
    41568998,
    40619169,
    42723440,
    41570626,
    42819254,
    41147561,
    42007633,
    41293136,
    42633414,
    42052761,
    42050808,
    41342818,
    41149955,
    41163537,
    42159953,
    42796764,
    41293135,
    42723447,
    41673686,
    41673680,
    41146753,
    42229551,
    42393555,
    42585016,
    41570628,
    41601374,
    41151557,
    41148358,
    42714759,
    42487885,
    41922066,
    42797785,
    41885678,
    42360994,
    41576927,
    42416643,
    42416645,
    41569002,
    41437486,
    42157937,
    42814111,
    42216652,
    41441804,
    42702283,
    41083849,
    42642146,
    42141115,
    41148363,
    42764027,
    42765768,
    41459633,
    42416663,
    42568509,
    41979441,
    40522143,
    42774447,
    41987101,
    42356188,
    40475638,
    41726159,
    42043764,
    42554335,
    41277802,
    42106901,
    41478945,
    42607673,
    42607667,
    42048975,
    41533488,
    40537513,
    42360993,
    41515536,
    42242910,
    42106894,
    42585014,
    42583294,
    42498862,
    41394676,
    42633398,
    41959896,
    41535087,
    42633415,
    42714760,
    40714024,
    42859544,
    42349929,
    40750558,
    42796301,
    41148357,
    42030867,
    42690516,
    42797784,
    41923657,
    42079114,
    42253115,
    41008234,
    42048972,
    42128938,
    41310746,
    41149162,
    41150752,
    42416728,
    42159954,
    42050349,
    41876559,
    42128937,
    42416575,
    42633397,
    39467458,
    42796294,
    42774448,
    42632606,
    41668351,
    42633400,
    42038797,
    42650610,
    41876558,
    41691744,
    42404406,
    42052972,
    42128936,
    41146752,
    42050348,
    42360999,
    41310748,
    41108136,
    41923654,
    42170764,
    42501499,
    40716416,
    41009772,
    41922061,
    42668718,
    41394670,
    42365744,
    41146890,
    41833574,
    42242915,
    42416688,
    41148362,
    41009766,
    42253837,
    41150764,
    41500188,
    42819255,
    41851236,
    41682855,
    42453453,
    42489607,
    39219125,
    41459631,
    42170762,
    40792405,
    42065338,
    41922060,
    41003471,
    42796762,
    41277804,
    42065334,
    42453458,
    42191213,
    42501501,
    41725839,
    41394666,
    40520532,
    40996749,
    42757216,
    41569008,
    42293661,
    41083310,
    42772043,
    41680030,
    41108135,
    42789051,
    42592652,
    42173965,
    41973743,
    40579887,
    41680028,
    42719388,
    41478949,
    40714026,
    40712426,
    41277970,
    41568999,
    40789211,
    41150096,
    40522131,
    41543531,
    41859018,
    40750557,
    41693519,
    42106892,
    42050814,
    42416712,
    42087773,
    40790004,
    41147557,
    41151560,
    42065337,
    42134562,
    42416583,
    42138558,
    41690318,
    42798201,
    41974815,
    42416667,
    41680027,
    40790003,
    40855039,
    42065341,
    41146757,
    42091664,
    42690514,
    40713218,
    42182129,
    41931208,
    41003975,
    42416652,
    42253111,
    42416664,
    41638529,
    42416691,
    38837064,
    42065346,
    41147559,
    41458129,
    42664045,
    41859016,
    40711625,
    42134552,
    40520537,
    42416724,
    42181646,
    40711618,
    41187147,
    41708020,
    41543530,
    42107693,
    41823582,
    42030863,
    40793209,
    41146893,
    42370307,
    40860528,
    42500464,
    40792400,
    40860521,
    40970620,
    40970616,
    40970614,
    40887747,
    40996753,
    40970618,
    40793201,
    40791608,
    40902959,
    40996750,
    40970621,
    40949984,
    40996744,
    40792406,
    40979214,
    40996745,
    40958205,
    40887748,
    40996754,
    40948217,
    40793206,
    40793203,
    40948222,
    40961311,
    40948220,
    40996746,
    40860525,
    40855040,
    40886145,
    40996748,
    40855041,
    40970622,
    40948214,
    40860529,
    40793210,
    40958206,
    40861439,
    40965310,
    40791607,
    40793204,
    40970617,
    40949983,
    40965315,
    40970615,
    40792409,
    40996755,
    40886147,
    40996747,
    40791604,
    40793200,
    40792402,
    40792401,
    40970619,
    40996752,
    40996758,
    42370305,
    40734210,
    41570601,
    42792759,
    40789201,
    42052756,
    41984704,
    41888463,
    40996757,
    40713222,
    42859546,
    42253114,
    40793205,
    41682867,
    41083853,
    41346220,
    41047799,
    41614800,
    42255439,
    41381941,
    40608142,
    40791610,
    41276455,
    42798202,
    41668352,
    42642142,
    42128942,
    42607674,
    42871436,
    42814115,
    42128939,
    42365745,
    42143406,
    42416689,
    42404413,
    41163540,
    41148353,
    40789205,
    41876561,
    40713223,
    40715625,
    42727927,
    41776463,
    41151553,
    42592110,
    42106890,
    40714820,
    40770605,
    42814019,
    41848256,
    41148364,
    42814114,
    41682868,
    42794768,
    41848257,
    40887749,
    41478954,
    41085511,
    41044335,
    41711730,
    42293663,
    40788401,
    41381937,
    40790008,
    41278247,
    42351536,
    41277956,
    40522138,
    42642147,
    41442608,
    40681967,
    42182125,
    41381942,
    42592659,
    41853633,
    41938595,
    41478951,
    41710096,
    42365741,
    42040396,
    40788412,
    41885681,
    41046680,
    41037615,
    42416582,
    40948218,
    40860522,
    40970623,
    40860523,
    40973839,
    40860527,
    40793212,
    40961310,
    40860526,
    40979215,
    40996743,
    40965313,
    40804560,
    40948219,
    40792408,
    40792407,
    40965314,
    40902958,
    40948215,
    40793202,
    40861438,
    40902960,
    40792403,
    40996756,
    40948221,
    40791605,
    40965312,
    40791606,
    40887750,
    40965309,
    40961312,
    40792404,
    40948213,
    40793211,
    40886146,
    40996742,
    40965311,
    40886149,
    40860530,
    40886148,
    40948216,
    40793208,
    40791609,
    40996751,
    40793207,
    40860524
]

class PolygonSpecificNumbersWorker {
    
    numbers: number[]

    groupSize: number

    saveBatchMultiple: number

    cursor: number

    upsertConstraints: StringKeyMap

    batchResults: any[] = []

    batchBlockNumbersIndexed: number[] = []

    batchExistingBlocksMap: { [key: number]: IndexedBlock } = {}

    chunkSize: number = 2000

    saveBatchIndex: number = 0

    smartWalletInitializerAddresses: string[] = []

    constructor(numbers: number[], groupSize?: number, saveBatchMultiple?: number) {
        this.numbers = numbers
        this.groupSize = groupSize || 1
        this.saveBatchMultiple = saveBatchMultiple || 1
        this.upsertConstraints = {}
    }

    async run() {
        this.smartWalletInitializerAddresses = await this._getIvySmartWalletInitializerAddresses()

        const groups = toChunks(redo, this.groupSize)
        for (const group of groups) {
            await this._indexBlockGroup(group)
        }
        if (this.batchResults.length) {
            try {
                await this._saveBatchResults(this.batchResults)
            } catch (err) {
                logger.error(`Error saving batch: ${err}`)
                return
            } 
        }

        logger.info('DONE')
        exit()
    }


    async _indexBlockGroup(blockNumbers: number[]) {
        const indexResultPromises = []
        for (const blockNumber of blockNumbers) {
            indexResultPromises.push(this._indexBlock(blockNumber))
        }

        logger.info(`Indexing ${blockNumbers[0]} --> ${blockNumbers[blockNumbers.length - 1]}...`)

        const indexResults = await Promise.all(indexResultPromises)
        this.batchResults.push(...indexResults)
        this.saveBatchIndex++

        if (this.saveBatchIndex === this.saveBatchMultiple) {
            this.saveBatchIndex = 0
            const batchResults = [...this.batchResults]
            this.batchResults = []
            try {
                await this._saveBatchResults(batchResults)
            } catch (err) {
                logger.error(`Error saving batch: ${err}`)
                return
            }
        }
    }

    async _indexBlock(blockNumber: number): Promise<StringKeyMap | null> {
        let result
        try {
            result = await getIndexer(this._atNumber(blockNumber)).perform()
        } catch (err) {
            logger.error(`Error indexing block ${blockNumber}:`, err)
            return null
        }
        if (!result) return null

        return result as StringKeyMap
    }

    _atNumber(blockNumber: number): NewReportedHead {
        return {
            id: 0,
            chainId: config.CHAIN_ID,
            blockNumber,
            blockHash: null,
            replace: false,
            force: true,
        }
    }

    async _saveBatchResults(results: any[]) {
        let blocks = []
        let transactions = []
        let logs = []
        let traces = []
        let contracts = []
        let erc20Tokens = [] 
        let nftCollections = []

        for (const result of results) {
            if (!result) continue
            blocks.push({ ...result.block, timestamp: () => result.pgBlockTimestamp })
            transactions.push(
                ...result.transactions.map((t) => ({
                    ...t,
                    blockTimestamp: () => result.pgBlockTimestamp,
                }))
            )
            logs.push(
                ...result.logs.map((l) => ({ ...l, blockTimestamp: () => result.pgBlockTimestamp }))
            )
            traces.push(
                ...result.traces.map((t) => ({
                    ...t,
                    blockTimestamp: () => result.pgBlockTimestamp,
                }))
            )
            contracts.push(
                ...result.contracts.map((c) => ({
                    ...c,
                    blockTimestamp: () => result.pgBlockTimestamp,
                }))
            )
            erc20Tokens.push(
                ...result.erc20Tokens.map((e) => ({
                    ...e,
                    blockTimestamp: () => result.pgBlockTimestamp,
                    lastUpdated: () => result.pgBlockTimestamp,
                }))
            )
            nftCollections.push(
                ...result.nftCollections.map((n) => ({
                    ...n,
                    blockTimestamp: () => result.pgBlockTimestamp,
                    lastUpdated: () => result.pgBlockTimestamp,
                }))
            )
        }
        
        if (!this.upsertConstraints.block && blocks.length) {
            this.upsertConstraints.block = fullPolygonBlockUpsertConfig(blocks[0])
        }
        if (!this.upsertConstraints.transaction && transactions.length) {
            this.upsertConstraints.transaction = fullPolygonTransactionUpsertConfig(transactions[0])
        }
        if (!this.upsertConstraints.log && logs.length) {
            this.upsertConstraints.log = fullPolygonLogUpsertConfig(logs[0])
        }
        if (!this.upsertConstraints.trace && traces.length) {
            this.upsertConstraints.trace = fullTraceUpsertConfig(traces[0])
        }
        if (!this.upsertConstraints.contract && contracts.length) {
            this.upsertConstraints.contract = fullContractUpsertConfig(contracts[0])
        }
        if (!this.upsertConstraints.erc20Token && erc20Tokens.length) {
            this.upsertConstraints.erc20Token = fullErc20TokenUpsertConfig()
        }
        if (!this.upsertConstraints.nftCollection && nftCollections.length) {
            this.upsertConstraints.nftCollection = fullNftCollectionUpsertConfig()
        }

        blocks = this.upsertConstraints.block
            ? uniqueByKeys(blocks, this.upsertConstraints.block[1])
            : blocks

        transactions = this.upsertConstraints.transaction
            ? uniqueByKeys(transactions, this.upsertConstraints.transaction[1])
            : transactions

        logs = this.upsertConstraints.log ? uniqueByKeys(logs, ['logIndex', 'transactionHash']) : logs

        traces = this.upsertConstraints.trace
            ? uniqueByKeys(traces, this.upsertConstraints.trace[1])
            : traces

        contracts = this.upsertConstraints.contract
            ? uniqueByKeys(contracts, this.upsertConstraints.contract[1])
            : contracts

        erc20Tokens = this.upsertConstraints.erc20Token
            ? uniqueByKeys(erc20Tokens, this.upsertConstraints.erc20Token[1].map(snakeToCamel))
            : erc20Tokens

        nftCollections = this.upsertConstraints.nftCollection
            ? uniqueByKeys(nftCollections, this.upsertConstraints.nftCollection[1].map(snakeToCamel))
            : nftCollections

        await Promise.all([
            this._upsertBlocks(blocks),
            this._upsertTransactions(transactions),
            this._upsertLogs(logs),
            this._upsertTraces(traces),
            this._upsertContracts(contracts),
            this._upsertErc20Tokens(erc20Tokens),
            this._upsertNftCollections(nftCollections),
        ])

        const ivySmartWallets = logs.length ? this._getIvySmartWallets(logs) : []
        ivySmartWallets.length && await this._upsertIvySmartWallets(ivySmartWallets)
    }

    _getIvySmartWallets(logs: StringKeyMap[]): StringKeyMap[] {
        logs = logs.sort((a, b) => 
            (Number(b.blockNumber) - Number(a.blockNumber)) || 
            (b.transactionIndex - a.transactionIndex) || 
            (b.logIndex - a.logIndex)
        )
        const smartWallets = []
        for (const log of logs) {
            if (this.smartWalletInitializerAddresses.includes(log.address) && log.eventName === 'WalletCreated') {
                const eventArgs = log.eventArgs || []
                if (!eventArgs.length) continue
                const data = this._logEventArgsAsMap(eventArgs)
                const contractAddress = data.smartWallet
                const ownerAddress = data.owner
                if (!contractAddress || !ownerAddress) continue           
                
                smartWallets.push({
                    contractAddress,
                    ownerAddress,
                    transactionHash: log.transactionHash,
                    blockNumber: Number(log.blockNumber),
                    blockHash: log.blockHash,
                    blockTimestamp: log.blockTimestamp.toISOString(),
                    chainId: config.CHAIN_ID,
                })
            }
        }
        if (!smartWallets.length) return []

        return uniqueByKeys(smartWallets, ['chainId', 'contractAddress'])
    }

    _logEventArgsAsMap(eventArgs: StringKeyMap[]): StringKeyMap {
        const data = {}
        for (const arg of eventArgs) {
            if (arg.name) {
                data[arg.name] = formatAbiValueWithType(arg.value, arg.type)
            }
        }
        return data
    }

    async _upsertBlocks(blocks: StringKeyMap[]) {
        if (!blocks.length) return
        const [updateBlockCols, conflictBlockCols] = this.upsertConstraints.block
        await SharedTables
            .createQueryBuilder()
            .insert()
            .into(PolygonBlock)
            .values(blocks)
            .orUpdate(updateBlockCols, conflictBlockCols)
            .execute()
    }

    async _upsertTransactions(transactions: StringKeyMap[]) {
        if (!transactions.length) return
        const [updateTransactionCols, conflictTransactionCols] = this.upsertConstraints.transaction
        await Promise.all(
            toChunks(transactions, this.chunkSize).map((chunk) => {
                return SharedTables
                    .createQueryBuilder()
                    .insert()
                    .into(PolygonTransaction)
                    .values(chunk)
                    .orUpdate(updateTransactionCols, conflictTransactionCols)
                    .execute()
            })
        )
    }

    async _upsertLogs(logs: StringKeyMap[]): Promise<StringKeyMap[]> {
        if (!logs.length) return []
        const [updateLogCols, conflictLogCols] = this.upsertConstraints.log
        return (
            await Promise.all(
                toChunks(logs, this.chunkSize).map((chunk) => {
                    return SharedTables
                        .createQueryBuilder()
                        .insert()
                        .into(PolygonLog)
                        .values(chunk)
                        .orUpdate(updateLogCols, conflictLogCols)
                        .returning('*')
                        .execute()
                })
            )
        ).map(result => result.generatedMaps).flat()
    }

    async _upsertTraces(traces: StringKeyMap[]) {
        if (!traces.length) return
        logger.info(`Saving ${traces.length} traces...`)
        const [updateTraceCols, conflictTraceCols] = this.upsertConstraints.trace
        await Promise.all(
            toChunks(traces, this.chunkSize).map((chunk) => {
                return SharedTables
                    .createQueryBuilder()
                    .insert()
                    .into(PolygonTrace)
                    .values(chunk)
                    .orUpdate(updateTraceCols, conflictTraceCols)
                    .execute()
            })
        )
    }

    async _upsertContracts(contracts: StringKeyMap[]) {
        if (!contracts.length) return
        logger.info(`Saving ${contracts.length} contracts...`)
        const [updateContractCols, conflictContractCols] = this.upsertConstraints.contract
        await Promise.all(
            toChunks(contracts, this.chunkSize).map((chunk) => {
                return SharedTables
                    .createQueryBuilder()
                    .insert()
                    .into(PolygonContract)
                    .values(chunk)
                    .orUpdate(updateContractCols, conflictContractCols)
                    .execute()
            })
        )
    }

    async _upsertIvySmartWallets(smartWallets: StringKeyMap[]) {
        for (const smartWallet of smartWallets) {
            try {
                await SharedTables.query(`INSERT INTO ivy.smart_wallets (contract_address, owner_address, transaction_hash, block_number, block_hash, block_timestamp, chain_id) VALUES ($1, $2, $3, $4, $5, $6, $7) ON CONFLICT (contract_address, chain_id) DO UPDATE SET owner_address = EXCLUDED.owner_address, transaction_hash = EXCLUDED.transaction_hash, block_number = EXCLUDED.block_number, block_hash = EXCLUDED.block_hash, block_timestamp = EXCLUDED.block_timestamp`,
                    [
                        smartWallet.contractAddress,
                        smartWallet.ownerAddress,
                        smartWallet.transactionHash,
                        smartWallet.blockNumber,
                        smartWallet.blockHash,
                        smartWallet.blockTimestamp,
                        smartWallet.chainId,
                    ]
                )
            } catch (err) {
                logger.error('Failed to insert smart wallet', err)
                return
            }
            logger.info('\nADDED SMART WALLET!\n', smartWallet)
        }
    }

    async _upsertErc20Tokens(erc20Tokens: StringKeyMap[]) {
        if (!erc20Tokens.length) return
        logger.info(`Saving ${erc20Tokens.length} erc20_tokens...`)
        await Promise.all(
            toChunks(erc20Tokens, this.chunkSize).map((chunk) => {
                return SharedTables
                    .createQueryBuilder()
                    .insert()
                    .into(Erc20Token)
                    .values(chunk)
                    .orIgnore()
                    .execute()
            })
        )
    }

    async _upsertNftCollections(nftCollections: StringKeyMap[]) {
        if (!nftCollections.length) return
        logger.info(`Saving ${nftCollections.length} nft_collections...`)
        await Promise.all(
            toChunks(nftCollections, this.chunkSize).map((chunk) => {
                return SharedTables
                    .createQueryBuilder()
                    .insert()
                    .into(NftCollection)
                    .values(chunk)
                    .orIgnore()
                    .execute()
            })
        )
    }

    async _getIvySmartWalletInitializerAddresses(): Promise<string[]> {
        try {
            return ((await contractInstancesRepo().find({
                select: { address: true },
                where: {
                    name: 'SmartWalletInitializer',
                    chainId: config.CHAIN_ID,
                }
            })) || []).map(ci => ci.address)
        } catch (err) {
            logger.error(`Error getting smart wallet initializer contract addresses: ${err}`)
            return []
        }
    }
}

export function getPolygonSpecificNumbersWorker(): PolygonSpecificNumbersWorker {
    return new PolygonSpecificNumbersWorker(
        config.SPECIFIC_INDEX_NUMBERS,
        config.RANGE_GROUP_SIZE,
        config.SAVE_BATCH_MULTIPLE
    )
}