import { ev, config, StringKeyMap } from '../../../shared'

const rpcApiConfig: StringKeyMap = {
    ...config,
    PORT: Number(ev('PORT', 6000)),
    AUTH_HEADER_NAME: 'Spec-Auth-Token',
    MAX_RPC_POOL_CALLS: Number(ev('MAX_RPC_POOL_CALLS', 100000)),
    ETHEREUM_RPC_POOL_ENDPOINTS: ev('ETHEREUM_RPC_POOL_ENDPOINTS'),
    GOERLI_RPC_POOL_ENDPOINTS: ev('GOERLI_RPC_POOL_ENDPOINTS'),
    POLYGON_RPC_POOL_ENDPOINTS: ev('POLYGON_RPC_POOL_ENDPOINTS'),
    MUMBAI_RPC_POOL_ENDPOINTS: ev('MUMBAI_RPC_POOL_ENDPOINTS'),
    BASE_RPC_POOL_ENDPOINTS: ev('BASE_RPC_POOL_ENDPOINTS'),
    OPTIMISM_RPC_POOL_ENDPOINTS: ev('OPTIMISM_RPC_POOL_ENDPOINTS'),
    ARBITRUM_RPC_POOL_ENDPOINTS: ev('ARBITRUM_RPC_POOL_ENDPOINTS'),
    ARBITRUM_SEPOLIA_RPC_POOL_ENDPOINTS: ev('ARBITRUM_SEPOLIA_RPC_POOL_ENDPOINTS'),
    PGN_RPC_POOL_ENDPOINTS: ev('PGN_RPC_POOL_ENDPOINTS'),
    CELO_RPC_POOL_ENDPOINTS: ev('CELO_RPC_POOL_ENDPOINTS'),
    LINEA_RPC_POOL_ENDPOINTS: ev('LINEA_RPC_POOL_ENDPOINTS'),
    SEPOLIA_RPC_POOL_ENDPOINTS: ev('SEPOLIA_RPC_POOL_ENDPOINTS'),
    NUM_RPC_ENDPOINTS_PER_CHAIN: Number(ev('NUM_RPC_ENDPOINTS_PER_CHAIN', 2)),
    EXPO_BACKOFF_DELAY: 30,
    EXPO_BACKOFF_MAX_ATTEMPTS: 10,
    EXPO_BACKOFF_FACTOR: 1.5,
    RATE_LIMIT_HIT_TIMEOUT: Number(ev('RATE_LIMIT_HIT_TIMEOUT', 1000)),
}

export default rpcApiConfig